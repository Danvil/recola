{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"en",
				"entities"
			],
			[
				"lin",
				"line_strips"
			],
			[
				"Co",
				"ColorRgba8"
			],
			[
				"orth",
				"ortho_normal_basis_z"
			],
			[
				"slee",
				"sleep_duration"
			],
			[
				"Tr",
				"TransformUniformGroup"
			],
			[
				"Moc",
				"MoccaRunner"
			],
			[
				"sim",
				"sim_worker_handle"
			],
			[
				"Buff",
				"BufferCommand"
			],
			[
				"Gpu",
				"GpuBufferMoccal"
			],
			[
				"W",
				"WgpuRes"
			],
			[
				"Uns",
				"UnsafeAnyCell"
			],
			[
				"run",
				"run_thread"
			],
			[
				"Bu",
				"BufferCommand"
			],
			[
				"M",
				"MoccaRunner"
			],
			[
				"Sim",
				"SimulationWorker"
			],
			[
				"even",
				"event_loop"
			],
			[
				"Win",
				"WindowStore"
			],
			[
				"Buf",
				"BufferId"
			],
			[
				"it",
				"items"
			],
			[
				"Buffer",
				"BufferCommandQueueItem"
			],
			[
				"win",
				"win_id"
			],
			[
				"ren",
				"renderer_rpass"
			],
			[
				"buf",
				"buf_id"
			],
			[
				"SIn",
				"SingletonMut"
			],
			[
				"tran",
				"transform_buf"
			],
			[
				"cam",
				"camera_buf"
			],
			[
				"TR",
				"TransformBufferGpu"
			],
			[
				"qu",
				"queue_render_items"
			],
			[
				"vbu",
				"vbuf_entity"
			],
			[
				"C",
				"CandyExampleCubeMocca"
			],
			[
				"m",
				"mocca_runner"
			],
			[
				"Run",
				"RuntimeApp"
			],
			[
				"eve",
				"event_loop"
			],
			[
				"BloodVess",
				"BloodVesselPrefab"
			],
			[
				"Bl",
				"BloodConfig"
			],
			[
				"Heart",
				"HeartRateBpm"
			],
			[
				"Hear",
				"HeartRateBpm"
			],
			[
				"H",
				"HeartPumpVolume"
			],
			[
				"lun",
				"lung_1"
			],
			[
				"ene",
				"entity_named"
			],
			[
				"En",
				"EntityView"
			],
			[
				"blu",
				"blue_in"
			],
			[
				"rou",
				"red_out"
			],
			[
				"hear",
				"heart_chamber_fn"
			],
			[
				"defau",
				"default_chunk"
			],
			[
				"ho",
				"hemoglobin_saturation"
			],
			[
				"hom",
				"hemoglobin_concentration"
			],
			[
				"Blo",
				"BloodChunk"
			],
			[
				"He",
				"HeartRate"
			],
			[
				"Hea",
				"HeartState"
			],
			[
				"vol",
				"volume"
			],
			[
				"Bloo",
				"BloodChunk"
			],
			[
				"wa",
				"wall_thickness"
			],
			[
				"pre",
				"pressure"
			],
			[
				"nom",
				"nominal_volume"
			],
			[
				"BloodVe",
				"BloodVesselStats"
			],
			[
				"le",
				"length"
			],
			[
				"no",
				"nominal_count"
			],
			[
				"part",
				"part_vessel"
			],
			[
				"in",
				"inflow_alloc"
			],
			[
				"war",
				"warmup_request"
			],
			[
				"sum",
				"sum_debt"
			],
			[
				"with",
				"with_round_op_threshold"
			],
			[
				"ass",
				"assert_eq\tassert_eq!(…, …)"
			],
			[
				"c",
				"capacity"
			],
			[
				"d",
				"demand"
			],
			[
				"Fai",
				"FairAlloc"
			],
			[
				"Fa",
				"FairAlloc"
			],
			[
				"trans",
				"transfer_count"
			],
			[
				"Vess",
				"VesselToHeart"
			],
			[
				"Lung",
				"LungOxygenAbsorption"
			],
			[
				"Mod",
				"ModifierKind"
			],
			[
				"Modif",
				"ModifierBase"
			],
			[
				"Ori",
				"OrganEfficiencyMod"
			],
			[
				"Cu",
				"CurrentBloodOxygen"
			],
			[
				"ciri",
				"critical_blood_oxygen_organ_eff_range"
			],
			[
				"res",
				"rescale_01"
			],
			[
				"De",
				"DecimalRange"
			],
			[
				"Dec",
				"Decimal"
			],
			[
				"Bre",
				"BreathingSettings"
			],
			[
				"Cur",
				"CurrentBloodOxygen"
			],
			[
				"s",
				"system"
			],
			[
				"Mo",
				"Modifier"
			],
			[
				"sec",
				"sec_sub"
			],
			[
				"S",
				"SECONDARY_TO_PRIMARY_SATIATION_CONVERSION_RATE"
			],
			[
				"primsub",
				"prim_sub_actual"
			],
			[
				"pr",
				"primary"
			],
			[
				"prim",
				"prim_sub_max"
			],
			[
				"inv",
				"inventory_item_command"
			],
			[
				"In",
				"InventoryItemCommands"
			],
			[
				"Vie",
				"ViewKind"
			],
			[
				"sele",
				"selection"
			],
			[
				"se",
				"selection_index"
			],
			[
				"sor",
				"sorting_criteria_cycle"
			],
			[
				"Inve",
				"InventorySortingCriteria"
			],
			[
				"Dire",
				"Direction1"
			],
			[
				"ta",
				"table_state"
			],
			[
				"Inv",
				"InventoryView"
			],
			[
				"sort",
				"sort_by"
			],
			[
				"play",
				"player_entity"
			],
			[
				"tabl",
				"table_state"
			],
			[
				"set_",
				"set_second"
			],
			[
				"pl",
				"player_inventory"
			],
			[
				"oxy",
				"oxygen_absorption_mod"
			],
			[
				"po",
				"pollution_absorption"
			],
			[
				"jac",
				"jack_inv"
			],
			[
				"Consu",
				"ConsumeOp"
			],
			[
				"Cont",
				"ContainedBy"
			],
			[
				"Con",
				"ContainedBy"
			],
			[
				"main",
				"main_impl"
			],
			[
				"Wor",
				"WorldApi"
			],
			[
				"spin",
				"spin_threshold"
			],
			[
				"sl",
				"sleep_time"
			],
			[
				"ste",
				"steam_client"
			],
			[
				"thr",
				"throttle"
			],
			[
				"co",
				"connection_time"
			],
			[
				"steam",
				"steam_id"
			],
			[
				"stea",
				"steam_server"
			],
			[
				"Gam",
				"GameServerMessage"
			],
			[
				"Auth",
				"AuthConnectionStatus"
			],
			[
				"thre",
				"thread_1"
			],
			[
				"re",
				"requests"
			],
			[
				"Log",
				"LoginServerConfig"
			],
			[
				"Conn",
				"ConnectionStatus"
			],
			[
				"conn",
				"connections"
			],
			[
				"Cli",
				"ClientRequest"
			],
			[
				"hand",
				"handle_request"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/I/Ikabur/candy/crates/candy/src/renderer/bind_group.rs",
			"settings":
			{
				"buffer_size": 3428,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "/I/Ikabur/atom/crates/excess/src/world.rs",
			"settings":
			{
				"buffer_size": 7322,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					29,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAnRUAAAAAAACdFQAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAnRUAAAAAAACdFQAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAnRUAAAAAAACdFQAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAnRUAAAAAAACdFQAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAnRUAAAAAAACdFQAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAnRUAAAAAAACdFQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/I/Ikabur/atom/crates/excess/src/commands.rs",
			"settings":
			{
				"buffer_size": 8803,
				"line_ending": "Windows"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAOgQAAAAAAAA6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACfHgAALy8gQ29weXJpZ2h0IDIwMjQgYnkgRGF2aWQgV2Vpa2Vyc2RvcmZlci4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KCnVzZSBjcmF0ZTo6ewogICAgRW50aXR5LCBFbnRpdHlTZXRBcmcsIEVudGl0eVNldENvbXBvbmVudHNUdXBsZSwgU2luZ2xldG9uTWFya2VyLCBTdGF0aWNTaXplZFNlbmRTeW5jSWQsIFdvcmxkLAogICAgZGV0YWlsOjp7RmFicmljLCBVbnNhZmVXb3JsZENlbGx9LAp9Owp1c2UgZXhjZXNzX21hY3Jvczo6YWxsX3R1cGxlczsKCi8vLyBEZWZlcnJlZCBjb21tYW5kcyB0byBleGVjdXRlIG9uIGEgd29ybGQgYXQgdGhlIGVuZCBvZiBhIHN5c3RlbQovLy8KLy8vIENvbW1hbmRzIGNhbiBiZSB1c2VkIHRvIHF1ZXVlIHdvcmsgd2hpbGUgb3RoZXIgcXVlcmllcyBoYXZlIHJlYWQgb3Igd3JpdGUgYWNjZXNzIHRvIHBhcnRzIG9mCi8vLyB0aGUgd29ybGQuIENvbW1hbmRzIGNhbiB0aGVuIGJlIGFwcGxpZWQgYWZ0ZXJ3YXJkcyB3aXRoIHVuaXF1ZSBhY2Nlc3MgdG8gdGhlIHdvcmxkLgovLy8KLy8vICMgRXhhbXBsZQovLy8gYGBgCi8vLyBzdHJ1Y3QgRm9vIHt9OwovLy8gZm4gZXhhbXBsZShtdXQgY29tbWFuZHM6IGF0b206OkNvbW1hbmRzKSB7Ci8vLyAgICAgbGV0IGVpZCA9IGNvbW1hbmRzLnNwYXduKChGb28ge30sIDNfaTMyKSkuaWQoKTsKLy8vICAgICAvLyB1c2UgZWlkLCBidXQgY29tcG9uZW50cyBhcmUgbm90IHlldCBhZGRlZAovLy8gfQovLy8gYGBgCnB1YiBzdHJ1Y3QgQ29tbWFuZHM8J2YsICdxLCBCPiB7CiAgICB3b3JsZF9pZF9nZW46IFVuc2FmZVdvcmxkQ2VsbDwnZiwgQj4sCiAgICBxdWV1ZTogJidxIG11dCBDb21tYW5kUXVldWU8Qj4sCn0KCmltcGw8J2YsICdxLCBCOiBGYWJyaWM+IENvbW1hbmRzPCdmLCAncSwgQj4gewogICAgcHViKGNyYXRlKSBmbiBuZXcoCiAgICAgICAgd29ybGRfaWRfZ2VuOiBVbnNhZmVXb3JsZENlbGw8J2YsIEI+LAogICAgICAgIHF1ZXVlOiAmJ3EgbXV0IENvbW1hbmRRdWV1ZTxCPiwKICAgICkgLT4gU2VsZiB7CiAgICAgICAgU2VsZiB7CiAgICAgICAgICAgIHdvcmxkX2lkX2dlbiwKICAgICAgICAgICAgcXVldWUsCiAgICAgICAgfQogICAgfQoKICAgIC8vLyBTcGF3bnMgYSBuZXcgZW50aXR5IGFmdGVyIHRoZSBzeXN0ZW0gaGFzIGNvbmNsdWRlZAogICAgcHViIGZuIHNwYXduX2VtcHR5PCdjPigmJ2MgbXV0IHNlbGYpIC0+IEVudGl0eUNvbW1hbmRzPCdmLCAncSwgJ2MsIEI+IHsKICAgICAgICAvLyBTQUZFVFk6IEl0IGlzIGFsd2F5cyBzYWZlIHRvIGlzc3VlIGEgbmV3IGVudGl0eSBJRAogICAgICAgIGxldCBpZCA9IHVuc2FmZSB7IHNlbGYud29ybGRfaWRfZ2VuLmdldF9tdXQoKSB9LmltcGxfaXNzdWVfZW50aXR5KCk7CgogICAgICAgIHNlbGYucXVldWUucHVzaChtb3ZlIHx3b3JsZDogJm11dCBXb3JsZDxCPnwgewogICAgICAgICAgICB3b3JsZC5zcGF3bl9lbXB0eV93aXRoX2lkKGlkKTsKICAgICAgICB9KTsKCiAgICAgICAgRW50aXR5Q29tbWFuZHMgeyBjb21tYW5kczogc2VsZiwgaWQgfQogICAgfQoKICAgIC8vLyBTcGF3bnMgYSBuZXcgZW50aXR5IHdpdGggY29tcG9uZW50cyBhZnRlciB0aGUgc3lzdGVtIGhhcyBjb25jbHVkZWQKICAgIHB1YiBmbiBzcGF3bjwnYywgQTogRW50aXR5U2V0Q29tcG9uZW50c1R1cGxlPEI+ICsgJ3N0YXRpYyArIFNlbmQgKyBTeW5jPigKICAgICAgICAmJ2MgbXV0IHNlbGYsCiAgICAgICAgYXJnOiBBLAogICAgKSAtPiBFbnRpdHlDb21tYW5kczwnZiwgJ3EsICdjLCBCPiB7CiAgICAgICAgLy8gU0FGRVRZOiBJdCBpcyBhbHdheXMgc2FmZSB0byBpc3N1ZSBhIG5ldyBlbnRpdHkgSUQKICAgICAgICBsZXQgaWQgPSB1bnNhZmUgeyBzZWxmLndvcmxkX2lkX2dlbi5nZXRfbXV0KCkgfS5pbXBsX2lzc3VlX2VudGl0eSgpOwoKICAgICAgICBzZWxmLnF1ZXVlLnB1c2gobW92ZSB8d29ybGQ6ICZtdXQgV29ybGQ8Qj58IHsKICAgICAgICAgICAgd29ybGQuc3Bhd25fd2l0aF9pZChpZCwgYXJnKTsKICAgICAgICB9KTsKCiAgICAgICAgRW50aXR5Q29tbWFuZHMgeyBjb21tYW5kczogc2VsZiwgaWQgfQogICAgfQoKICAgIC8vLyBEZXNwYXducyBhbiBlbnRpdHkgYWZ0ZXIgdGhlIHN5c3RlbSBoYXMgY29uY2x1ZGVkCiAgICBwdWIgZm4gZGVzcGF3bigmbXV0IHNlbGYsIGlkOiBFbnRpdHkpIHsKICAgICAgICBzZWxmLnF1ZXVlCiAgICAgICAgICAgIC5wdXNoKG1vdmUgfHdvcmxkOiAmbXV0IFdvcmxkPEI+fCB3b3JsZC5kZXNwYXduKGlkKSk7CiAgICB9CgogICAgLy8vIEdldHMgYWNjZXNzIHRvIG9wZXJhdGlvbnMgcmVsYXRlZCB0byBlbnRpdGllcwogICAgcHViIGZuIGVudGl0eTwnYz4oJidjIG11dCBzZWxmLCBpZDogRW50aXR5KSAtPiBFbnRpdHlDb21tYW5kczwnZiwgJ3EsICdjLCBCPiB7CiAgICAgICAgRW50aXR5Q29tbWFuZHMgeyBjb21tYW5kczogc2VsZiwgaWQgfQogICAgfQoKICAgIC8vLyBTZXRzIGEgc2luZ2xldG9uIGFmdGVyIHRoZSBzeXN0ZW0gaGFzIGNvbmNsdWRlZAogICAgcHViIGZuIHNldF9zaW5nbGV0b248J2MsIFM6IFNpbmdsZXRvbk1hcmtlcj4oJidjIG11dCBzZWxmLCB2YWx1ZTogUykgewogICAgICAgIHNlbGYucXVldWUKICAgICAgICAgICAgLnB1c2gobW92ZSB8d29ybGQ6ICZtdXQgV29ybGQ8Qj58IHdvcmxkLnNldF9zaW5nbGV0b24odmFsdWUpKTsKICAgIH0KCiAgICBwdWIgZm4gcmVtb3ZlX3NpbmdsZXRvbjwnYywgUzogU2luZ2xldG9uTWFya2VyPigmJ2MgbXV0IHNlbGYpIHsKICAgICAgICBzZWxmLnF1ZXVlLnB1c2gobW92ZSB8d29ybGQ6ICZtdXQgV29ybGQ8Qj58IHsKICAgICAgICAgICAgd29ybGQucmVtb3ZlX3NpbmdsZXRvbjo6PFM+KCk7CiAgICAgICAgfSk7CiAgICB9Cn0KCi8vLyBBbiBvcGVyYXRpb24gd2hpY2ggY2FuIGJlIGFkZGVkIHRvIGEgY29tbWFuZCBxdWV1ZQpwdWIgdHJhaXQgQ29tbWFuZDxCPjogU2VuZCArICdzdGF0aWMgewogICAgZm4gYXBwbHkoc2VsZiwgd29ybGQ6ICZtdXQgV29ybGQ8Qj4pOwp9CgppbXBsPFQ6IFNlbmQgKyAnc3RhdGljLCBCPiBDb21tYW5kPEI+IGZvciBUCndoZXJlCiAgICBUOiBGbk9uY2UoJm11dCBXb3JsZDxCPiksCnsKICAgIGZuIGFwcGx5KHNlbGYsIHdvcmxkOiAmbXV0IFdvcmxkPEI+KSB7CiAgICAgICAgKHNlbGYpKHdvcmxkKQogICAgfQp9CgovLy8gSGVscGVyIHRyYWl0IGZvciBgQm94PGR5biBDb21tYW5kPmAgdG8gY2FsbCBjb25zdW1pbmcgYGFwcGx5YAp0cmFpdCBEeW5Db21tYW5kPEI+IHsKICAgIGZuIGFwcGx5KCZtdXQgc2VsZiwgd29ybGQ6ICZtdXQgV29ybGQ8Qj4pOwp9CgppbXBsPEM6IENvbW1hbmQ8Qj4sIEI+IER5bkNvbW1hbmQ8Qj4gZm9yIE9wdGlvbjxDPiB7CiAgICBmbiBhcHBseSgmbXV0IHNlbGYsIHdvcmxkOiAmbXV0IFdvcmxkPEI+KSB7CiAgICAgICAgc2VsZi50YWtlKCkudW53cmFwKCkuYXBwbHkod29ybGQpOwogICAgfQp9CgovLy8gQSBxdWV1ZSBvZiBjb21tYW5kcwpwdWIgc3RydWN0IENvbW1hbmRRdWV1ZTxCPiB7CiAgICBjb21tYW5kczogVmVjPEJveDxkeW4gRHluQ29tbWFuZDxCPj4+LAp9CgppbXBsPEI+IERlZmF1bHQgZm9yIENvbW1hbmRRdWV1ZTxCPiB7CiAgICBmbiBkZWZhdWx0KCkgLT4gU2VsZiB7CiAgICAgICAgU2VsZiB7CiAgICAgICAgICAgIGNvbW1hbmRzOiBWZWM6Om5ldygpLAogICAgICAgIH0KICAgIH0KfQoKaW1wbDxCPiBDb21tYW5kUXVldWU8Qj4gewogICAgLy8vIEFkZHMgYSBuZXcgY29tbWFuZCB0byB0aGUgZW5kIG9mIHRoZSBxdWV1ZQogICAgcHViIGZuIHB1c2g8QzogQ29tbWFuZDxCPj4oJm11dCBzZWxmLCBjb21tYW5kOiBDKSB7CiAgICAgICAgc2VsZi5jb21tYW5kcy5wdXNoKEJveDo6bmV3KFNvbWUoY29tbWFuZCkpKTsKICAgIH0KCiAgICAvLy8gQXBwbGllcyBhbGwgcXVldWVkIGNvbW1hbmRzIHRvIHRoZSB3b3JsZCBhbmQgY2xlYXJzIHRoZSBxdWV1ZQogICAgcHViIGZuIGFwcGx5KHNlbGYsIHdvcmxkOiAmbXV0IFdvcmxkPEI+KSB7CiAgICAgICAgZm9yIG11dCBjb21tYW5kIGluIHNlbGYuY29tbWFuZHMuaW50b19pdGVyKCkgewogICAgICAgICAgICBjb21tYW5kLmFwcGx5KHdvcmxkKTsKICAgICAgICB9CiAgICB9Cn0KCi8vLyBDb21tYW5kcyBmb3IgZW50aXRpZXMKcHViIHN0cnVjdCBFbnRpdHlDb21tYW5kczwnZiwgJ3EsICdjLCBCPiB7CiAgICBjb21tYW5kczogJidjIG11dCBDb21tYW5kczwnZiwgJ3EsIEI+LAogICAgaWQ6IEVudGl0eSwKfQoKaW1wbDwnZiwgJ3EsICdjLCBCOiBGYWJyaWM+IEVudGl0eUNvbW1hbmRzPCdmLCAncSwgJ2MsIEI+IHsKICAgIC8vLyBHZXRzIHRoZSBJRCBvZiBhbiBlbnRpdHkKICAgIHB1YiBmbiBpZCgmc2VsZikgLT4gRW50aXR5IHsKICAgICAgICBzZWxmLmlkCiAgICB9CgogICAgLy8vIEFkZHMgYSBjb21wb25lbnQgdG8gYW4gZW50aXR5LiBUaGlzIG9wZXJhdGlvbiBpcyBkZWZlcnJlZCB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzeXN0ZW0uCiAgICBwdWIgZm4gYW5kX3NldDxBOiBFbnRpdHlTZXRBcmc8Qj4+KG11dCBzZWxmLCBhcmc6IEEpIC0+IEVudGl0eUNvbW1hbmRzPCdmLCAncSwgJ2MsIEI+IHsKICAgICAgICBzZWxmLnNldChhcmcpOwogICAgICAgIHNlbGYKICAgIH0KCiAgICAvLy8gTWF5YmUgYWRkcyBhIGNvbXBvbmVudCB0byBhbiBlbnRpdHkuIFRoaXMgb3BlcmF0aW9uIGlzIGRlZmVycmVkIHVudGlsIHRoZSBlbmQgb2YgdGhlIHN5c3RlbS4KICAgIHB1YiBmbiBhbmRfc2V0X3NvbWU8QTogRW50aXR5U2V0QXJnPEI+PigKICAgICAgICBtdXQgc2VsZiwKICAgICAgICBtYXliZV9hcmc6IE9wdGlvbjxBPiwKICAgICkgLT4gRW50aXR5Q29tbWFuZHM8J2YsICdxLCAnYywgQj4gewogICAgICAgIGlmIGxldCBTb21lKGFyZykgPSBtYXliZV9hcmcgewogICAgICAgICAgICBzZWxmLnNldChhcmcpOwogICAgICAgIH0KICAgICAgICBzZWxmCiAgICB9CgogICAgLy8vIEFkZHMgYSBjb21wb25lbnQgdG8gYW4gZW50aXR5LiBUaGlzIG9wZXJhdGlvbiBpcyBkZWZlcnJlZCB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzeXN0ZW0uCiAgICBwdWIgZm4gc2V0PEE6IEVudGl0eVNldEFyZzxCPj4oJm11dCBzZWxmLCBhcmc6IEEpIHsKICAgICAgICBsZXQgaWQgPSBzZWxmLmlkOwogICAgICAgIHNlbGYuY29tbWFuZHMKICAgICAgICAgICAgLnF1ZXVlCiAgICAgICAgICAgIC5wdXNoKG1vdmUgfHdvcmxkOiAmbXV0IFdvcmxkPEI+fCBtYXRjaCB3b3JsZC5nZXRfZW50aXR5KGlkKSB7CiAgICAgICAgICAgICAgICBOb25lID0+IHsKICAgICAgICAgICAgICAgICAgICBlcHJpbnRsbiEoImNvdWxkIG5vdCBzZXQgZW50aXR5OiB7aWQ6P30iLCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBTb21lKG11dCBlbnRpdHkpID0+IGFyZy5lbnRpdHlfc2V0X2FyZ19hcHBseSgmbXV0IGVudGl0eSksCiAgICAgICAgICAgIH0pOwogICAgfQoKICAgIC8vLyBBZGRzIG11bHRpcGxlIGNvbXBvbmVudHMgdG8gYW4gZW50aXR5IGF0IG9uY2UuIFRoaXMgb3BlcmF0aW9uIGlzIGRlZmVycmVkIHVudGlsIHRoZSBlbmQKICAgIC8vLyBvZiB0aGUgc3lzdGVtLgogICAgcHViIGZuIGFuZF9zZXRfbWFueTxDQzogJ3N0YXRpYyArIFNlbmQgKyBTeW5jICsgRW50aXR5Q29tbWFuZHNTZXRNYW55PEI+PigKICAgICAgICBtdXQgc2VsZiwKICAgICAgICB2YWx1ZXM6IENDLAogICAgKSAtPiBFbnRpdHlDb21tYW5kczwnZiwgJ3EsICdjLCBCPiB7CiAgICAgICAgc2VsZi5zZXRfbWFueSh2YWx1ZXMpOwogICAgICAgIHNlbGYKICAgIH0KCiAgICAvLy8gQWRkcyBtdWx0aXBsZSBjb21wb25lbnRzIHRvIGFuIGVudGl0eSBhdCBvbmNlLiBUaGlzIG9wZXJhdGlvbiBpcyBkZWZlcnJlZCB1bnRpbCB0aGUgZW5kCiAgICAvLy8gb2YgdGhlIHN5c3RlbS4KICAgIHB1YiBmbiBzZXRfbWFueTxDQzogJ3N0YXRpYyArIFNlbmQgKyBTeW5jICsgRW50aXR5Q29tbWFuZHNTZXRNYW55PEI+PigmbXV0IHNlbGYsIHZhbHVlczogQ0MpIHsKICAgICAgICBsZXQgaWQgPSBzZWxmLmlkOwogICAgICAgIHNlbGYuY29tbWFuZHMucXVldWUucHVzaChtb3ZlIHx3b3JsZDogJm11dCBXb3JsZDxCPnwgewogICAgICAgICAgICB2YWx1ZXMuYXBwbHkoaWQsIHdvcmxkKTsKICAgICAgICB9KTsKICAgIH0KCiAgICAvLy8gUmVtb3ZlcyBhIGNvbXBvbmVudCBmcm9tIGFuIGVudGl0eS4gVGhpcyBvcGVyYXRpb24gaXMgZGVmZXJyZWQgdW50aWwgdGhlIGVuZCBvZiB0aGUgc3lzdGVtLgogICAgcHViIGZuIGFuZF9yZW1vdmU8QzogU3RhdGljU2l6ZWRTZW5kU3luY0lkPihtdXQgc2VsZikgLT4gRW50aXR5Q29tbWFuZHM8J2YsICdxLCAnYywgQj4gewogICAgICAgIHNlbGYucmVtb3ZlOjo8Qz4oKTsKICAgICAgICBzZWxmCiAgICB9CgogICAgLy8vIFJlbW92ZXMgYSBjb21wb25lbnQgZnJvbSBhbiBlbnRpdHkuIFRoaXMgb3BlcmF0aW9uIGlzIGRlZmVycmVkIHVudGlsIHRoZSBlbmQgb2YgdGhlIHN5c3RlbS4KICAgIHB1YiBmbiByZW1vdmU8QzogU3RhdGljU2l6ZWRTZW5kU3luY0lkPigmbXV0IHNlbGYpIHsKICAgICAgICBsZXQgaWQgPSBzZWxmLmlkOwogICAgICAgIHNlbGYuY29tbWFuZHMucXVldWUucHVzaCgKICAgICAgICAgICAgbW92ZSB8d29ybGQ6ICZtdXQgV29ybGQ8Qj58IG1hdGNoIHdvcmxkLmltcGxfbG9jYXRlX2VudGl0eShpZCkgewogICAgICAgICAgICAgICAgTm9uZSA9PiB7CiAgICAgICAgICAgICAgICAgICAgZXByaW50bG4hKCJjb3VsZCBub3QgcmVtb3ZlIGVudGl0eSBjb21wb25lbnQ6IHtpZDo/fSBpcyBub3QgYSB2YWxpZCBlbnRpdHkgSUQiLCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBTb21lKGVudGl0eSkgPT4gewogICAgICAgICAgICAgICAgICAgIHdvcmxkLmltcGxfcmVtb3ZlX2NvbXBvbmVudDo6PEM+KGVudGl0eSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgKTsKICAgIH0KCiAgICAvLy8gRGVzcGF3bnMgdGhlIGVudGl0eQogICAgcHViIGZuIGRlc3Bhd24oc2VsZikgewogICAgICAgIHNlbGYuY29tbWFuZHMKICAgICAgICAgICAgLnF1ZXVlCiAgICAgICAgICAgIC5wdXNoKG1vdmUgfHdvcmxkOiAmbXV0IFdvcmxkPEI+fCB3b3JsZC5kZXNwYXduKHNlbGYuaWQpKTsKICAgIH0KfQoKcHViIHRyYWl0IEVudGl0eUNvbW1hbmRzU2V0TWFueTxCPiB7CiAgICBmbiBhcHBseShzZWxmLCBpZDogRW50aXR5LCB3b3JsZDogJm11dCBXb3JsZDxCPik7Cn0KCm1hY3JvX3J1bGVzISB0YWJsZV9yb3cgewogICAgKCQoJGE6IGlkZW50KSwqKSA9PiB7CiAgICAgICAgI1thbGxvdyhub25fc25ha2VfY2FzZSldCiAgICAgICAgaW1wbDxCOiBGYWJyaWMsICQoJGE6IEVudGl0eVNldEFyZzxCPiksKj4gRW50aXR5Q29tbWFuZHNTZXRNYW55PEI+IGZvciAoJCgkYSwpKikgewogICAgICAgICAgICBmbiBhcHBseShzZWxmLCBpZDogRW50aXR5LCB3b3JsZDogJm11dCBXb3JsZDxCPikgewogICAgICAgICAgICAgICAgaWYgbGV0IFNvbWUobXV0IGVudGl0eSkgPSB3b3JsZC5nZXRfZW50aXR5KGlkKSB7CiAgICAgICAgICAgICAgICAgICAgbGV0ICgkKCRhLCkqKSA9IHNlbGY7CiAgICAgICAgICAgICAgICAgICAgJCgkYS5lbnRpdHlfc2V0X2FyZ19hcHBseSgmbXV0IGVudGl0eSk7KSoKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgZXByaW50bG4hKCJjb3VsZCBub3Qgc2V0IGVudGl0eSBjb21wb25lbnQ6IHtpZDo/fSBpcyBub3QgYSB2YWxpZCBlbnRpdHkgSUQiLCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Owp9CgphbGxfdHVwbGVzISh0YWJsZV9yb3csIDEsIDE2LCBBKTsKAAAAAAAAAACrHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgQAAAAAAAA6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAOgQAAAAAAAA6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAOgQAAAAAAAA6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAOgQAAAAAAAA6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAOgQAAAAAAAA6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA+QAAAAAAAAD5AAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/I/Ikabur/candy/crates/scene_tree/src/scene_tree_mocca.rs",
			"settings":
			{
				"buffer_size": 7760,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					34,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAMsKAAAAAAAAzAoAAAAAAAAFAAAAZGVwdGg",
					"AQAAAAAAAAABAAAAywoAAAAAAADQCgAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAB0LAAAAAAAAHgsAAAAAAAAFAAAAZGVwdGg",
					"AQAAAAAAAAABAAAAHQsAAAAAAAAiCwAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"cut",
					null,
					"AQAAAA4LAAAAAAAADgsAAAAAAAAYAAAASGllcmFyY2h5RGVwdGgoaSBhcyB1MTYp",
					"AQAAAAAAAAABAAAADgsAAAAAAAAmCwAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANMKAAAAAAAA4AoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0woAAAAAAADTCgAAAAAAAP///////+9/"
				],
				[
					46,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOAKAAAAAAAA4goAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4AoAAAAAAADgCgAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"paste",
					null,
					"AQAAAOEKAAAAAAAA+QoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QoAAAAAAADhCgAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPkKAAAAAAAA+goAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QoAAAAAAAD5CgAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " &v"
					},
					"AwAAAPoKAAAAAAAA+woAAAAAAAAAAAAA+woAAAAAAAD8CgAAAAAAAAAAAAD8CgAAAAAAAP0KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+goAAAAAAAD6CgAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"left_delete",
					null,
					"AQAAAP4KAAAAAAAA/goAAAAAAABFAAAACiAgICAgICAgICAgIHYuaXRlcigpCiAgICAgICAgICAgICAgICAubWFwKG1vdmUgfCZlbnRpdHl8ICgsIGVudGl0eSkp",
					"AQAAAAAAAAABAAAA/goAAAAAAABDCwAAAAAAAP///////+9/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAJYKAAAAAAAAlwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlgoAAAAAAACWCgAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"rust_fmt_format_buffer",
					null,
					"CgAAAK0KAAAAAAAAugoAAAAAAAAAAAAAwQoAAAAAAADOCgAAAAAAAAAAAADaCgAAAAAAAOcKAAAAAAAAAAAAAPoKAAAAAAAA+goAAAAAAAAOAAAAewogICAgICAgICAgICAYCwAAAAAAABgLAAAAAAAACgAAAAogICAgICAgIH2GCwAAAAAAAIYLAAAAAAAAFgAAAC5pdGVyKCkuZmxhdF9tYXAofHZ8IHuTCwAAAAAAAJMLAAAAAAAAAQAAAHanCwAAAAAAAKcLAAAAAAAABAAAACAgICCnCwAAAAAAAL0LAAAAAAAAAAAAANgLAAAAAAAA2AsAAAAAAAAKAAAACiAgICAgICAgfQ",
					"AQAAAAAAAAABAAAAlwoAAAAAAACXCgAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					2,
					"left_delete",
					null,
					"AgAAABYLAAAAAAAAFgsAAAAAAAABAAAAdhULAAAAAAAAFQsAAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAAFwsAAAAAAAAXCwAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "v.as_slice"
					},
					"CgAAABULAAAAAAAAFgsAAAAAAAAAAAAAFgsAAAAAAAAXCwAAAAAAAAAAAAAXCwAAAAAAABgLAAAAAAAAAAAAABgLAAAAAAAAGQsAAAAAAAAAAAAAGQsAAAAAAAAaCwAAAAAAAAAAAAAaCwAAAAAAABsLAAAAAAAAAAAAABsLAAAAAAAAHAsAAAAAAAAAAAAAHAsAAAAAAAAdCwAAAAAAAAAAAAAdCwAAAAAAAB4LAAAAAAAAAAAAAB4LAAAAAAAAHwsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQsAAAAAAAAVCwAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAB8LAAAAAAAAIQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwsAAAAAAAAfCwAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAOgKAAAAAAAA6AoAAAAAAAAFAAAAZmxhdF8",
					"AQAAAAAAAAABAAAA7QoAAAAAAADtCgAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					2,
					"left_delete",
					null,
					"AgAAAF0LAAAAAAAAXQsAAAAAAAAOAAAASGllcmFyY2h5RGVwdGhcCwAAAAAAAFwLAAAAAAAAAQAAACg",
					"AQAAAAAAAAABAAAAXQsAAAAAAABrCwAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					2,
					"right_delete",
					null,
					"AgAAAFwLAAAAAAAAXAsAAAAAAAABAAAALFwLAAAAAAAAXAsAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAXAsAAAAAAABcCwAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"right_delete",
					null,
					"AQAAAGILAAAAAAAAYgsAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAYgsAAAAAAABiCwAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					2,
					"right_delete",
					null,
					"AgAAALULAAAAAAAAtQsAAAAAAAAEAAAAbW92ZbULAAAAAAAAtQsAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAtQsAAAAAAAC5CwAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"rust_accept_suggested_replacement",
					{
						"region":
						[
							2915,
							2915
						],
						"replacement": " + use<'_>"
					},
					"AQAAAGMLAAAAAAAAbQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQsAAAAAAAC1CwAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"paste",
					null,
					"AQAAALMeAAAAAAAAvh4AAAAAAAALAAAAaXRlcl9ncmFkZWQ",
					"AQAAAAAAAAABAAAAsx4AAAAAAAC+HgAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"left_delete",
					null,
					"AQAAAKceAAAAAAAApx4AAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAqB4AAAAAAACoHgAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "depth"
					},
					"BQAAAKceAAAAAAAAqB4AAAAAAAAAAAAAqB4AAAAAAACpHgAAAAAAAAAAAACpHgAAAAAAAKoeAAAAAAAAAAAAAKoeAAAAAAAAqx4AAAAAAAAAAAAAqx4AAAAAAACsHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApx4AAAAAAACnHgAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAKceAAAAAAAAqB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApx4AAAAAAACnHgAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAK0eAAAAAAAArh4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArR4AAAAAAACtHgAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": " entities)"
					},
					"CgAAAK4eAAAAAAAArx4AAAAAAAAAAAAArx4AAAAAAACwHgAAAAAAAAAAAACwHgAAAAAAALEeAAAAAAAAAAAAALEeAAAAAAAAsh4AAAAAAAAAAAAAsh4AAAAAAACzHgAAAAAAAAAAAACzHgAAAAAAALQeAAAAAAAAAAAAALQeAAAAAAAAtR4AAAAAAAAAAAAAtR4AAAAAAAC2HgAAAAAAAAAAAAC2HgAAAAAAALceAAAAAAAAAAAAALceAAAAAAAAuB4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArh4AAAAAAACuHgAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "\nfor"
					},
					"BAAAANIeAAAAAAAA2x4AAAAAAAAAAAAA2x4AAAAAAADcHgAAAAAAAAAAAADcHgAAAAAAAN0eAAAAAAAAAAAAAN0eAAAAAAAA3h4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0h4AAAAAAADSHgAAAAAAAP///////+9/"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": " e"
					},
					"AgAAAN4eAAAAAAAA3x4AAAAAAAAAAAAA3x4AAAAAAADgHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3h4AAAAAAADeHgAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAAOAeAAAAAAAA4R4AAAAAAAAAAAAA4R4AAAAAAADiHgAAAAAAAAAAAADiHgAAAAAAAOMeAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4B4AAAAAAADgHgAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": " en"
					},
					"AwAAAOMeAAAAAAAA5B4AAAAAAAAAAAAA5B4AAAAAAADlHgAAAAAAAAAAAADlHgAAAAAAAOYeAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4x4AAAAAAADjHgAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert_completion",
					{
						"completion": "entities",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "entities"
					},
					"AgAAAOQeAAAAAAAA5B4AAAAAAAACAAAAZW7kHgAAAAAAAOweAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5h4AAAAAAADmHgAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOweAAAAAAAA7R4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7B4AAAAAAADsHgAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAO0eAAAAAAAA7x4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7R4AAAAAAADtHgAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"right_delete",
					null,
					"AQAAAO4eAAAAAAAA7h4AAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAA7h4AAAAAAADuHgAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BAAAAH4iAAAAAAAAhyIAAAAAAAAAAAAAhyIAAAAAAACIIgAAAAAAAAAAAAB/IgAAAAAAAH8iAAAAAAAACAAAACAgICAgICAgfyIAAAAAAACDIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfiIAAAAAAAB+IgAAAAAAAAAAAAAAgG9A"
				],
				[
					131,
					1,
					"rust_fmt_format_buffer",
					null,
					"LAAAAPceAAAAAAAA+x4AAAAAAAAAAAAAIR8AAAAAAAAkHwAAAAAAAAAAAAAwHwAAAAAAADEfAAAAAAAAAAAAAEYfAAAAAAAASB8AAAAAAAAAAAAAVB8AAAAAAABWHwAAAAAAAAAAAAB8HwAAAAAAAH0fAAAAAAAAAAAAAIkfAAAAAAAAjB8AAAAAAAAAAAAAlh8AAAAAAACaHwAAAAAAAAAAAACuHwAAAAAAALIfAAAAAAAAAAAAAOofAAAAAAAA7B8AAAAAAAAAAAAA+B8AAAAAAAD6HwAAAAAAAAAAAAAyIAAAAAAAADQgAAAAAAAAAAAAAEQgAAAAAAAARiAAAAAAAAAAAAAAWyAAAAAAAABcIAAAAAAAAAAAAABsIAAAAAAAAG8gAAAAAAAAAAAAAKEgAAAAAAAApCAAAAAAAAAAAAAAtCAAAAAAAAC1IAAAAAAAAAAAAAC/IAAAAAAAAMIgAAAAAAAAAAAAAM4gAAAAAAAAzyAAAAAAAAAAAAAA0yAAAAAAAADVIAAAAAAAAAAAAADhIAAAAAAAAOMgAAAAAAAAAAAAAAkhAAAAAAAADSEAAAAAAAAAAAAAPCEAAAAAAABAIQAAAAAAAAAAAABQIQAAAAAAAFMhAAAAAAAAAAAAAFshAAAAAAAAXCEAAAAAAAAAAAAAZSEAAAAAAABnIQAAAAAAAAAAAABzIQAAAAAAAHUhAAAAAAAAAAAAAJUhAAAAAAAAliEAAAAAAAAAAAAAoiEAAAAAAAClIQAAAAAAAAAAAADBIQAAAAAAAMUhAAAAAAAAAAAAANghAAAAAAAA3CEAAAAAAAAAAAAA/yEAAAAAAAABIgAAAAAAAAAAAAAJIgAAAAAAAAsiAAAAAAAAAAAAADciAAAAAAAAOSIAAAAAAAAAAAAARSIAAAAAAABHIgAAAAAAAAAAAABcIgAAAAAAAF0iAAAAAAAAAAAAAGkiAAAAAAAAbCIAAAAAAAAAAAAAnCIAAAAAAACfIgAAAAAAAAAAAACrIgAAAAAAAKwiAAAAAAAAAAAAALYiAAAAAAAAuSIAAAAAAAAAAAAAwSIAAAAAAADCIgAAAAAAAAAAAADGIgAAAAAAAMgiAAAAAAAAAAAAANAiAAAAAAAA0iIAAAAAAAAAAAAA4yIAAAAAAADnIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhCIAAAAAAACEIgAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAN8eAAAAAAAA4B4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3x4AAAAAAADfHgAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANIeAAAAAAAA2x4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0h4AAAAAAADSHgAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": "prin"
					},
					"BAAAANseAAAAAAAA3B4AAAAAAAAAAAAA3B4AAAAAAADdHgAAAAAAAAAAAADdHgAAAAAAAN4eAAAAAAAAAAAAAN4eAAAAAAAA3x4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2x4AAAAAAADbHgAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"insert_completion",
					{
						"completion": "println",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "println"
					},
					"AgAAANseAAAAAAAA2x4AAAAAAAAEAAAAcHJpbtseAAAAAAAA4h4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3x4AAAAAAADfHgAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAOIeAAAAAAAA4x4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4h4AAAAAAADiHgAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOMeAAAAAAAA5R4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4x4AAAAAAADjHgAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAOQeAAAAAAAA5h4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5B4AAAAAAADkHgAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": "DEPTH:"
					},
					"BgAAAOUeAAAAAAAA5h4AAAAAAAAAAAAA5h4AAAAAAADnHgAAAAAAAAAAAADnHgAAAAAAAOgeAAAAAAAAAAAAAOgeAAAAAAAA6R4AAAAAAAAAAAAA6R4AAAAAAADqHgAAAAAAAAAAAADqHgAAAAAAAOseAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5R4AAAAAAADlHgAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					1,
					"left_delete",
					null,
					"AQAAAOoeAAAAAAAA6h4AAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAA6x4AAAAAAADrHgAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": " {}"
					},
					"AwAAAOoeAAAAAAAA6x4AAAAAAAAAAAAA6x4AAAAAAADsHgAAAAAAAAAAAADsHgAAAAAAAO0eAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6h4AAAAAAADqHgAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					1,
					"paste",
					null,
					"AQAAAOweAAAAAAAA8R4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7B4AAAAAAADsHgAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAPIeAAAAAAAA8x4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8h4AAAAAAADyHgAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPUeAAAAAAAA9h4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9R4AAAAAAAD1HgAAAAAAAP///////+9/"
				],
				[
					178,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAzQQAAAAAAADNBAAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"rust_accept_suggested_replacement",
					{
						"region":
						[
							206,
							228
						],
						"replacement": ""
					},
					"AQAAAM4AAAAAAAAAzgAAAAAAAAAWAAAALCBjb2xsZWN0aW9uczo6SGFzaE1hcA",
					"AQAAAAAAAAABAAAAzQQAAAAAAADNBAAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"rust_accept_suggested_replacement",
					{
						"region":
						[
							7826,
							7831
						],
						"replacement": "_depth"
					},
					"AQAAAJIeAAAAAAAAmB4AAAAAAAAFAAAAZGVwdGg",
					"AQAAAAAAAAABAAAAHAEAAAAAAAAcAQAAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					1,
					"right_delete",
					null,
					"AQAAAL4eAAAAAAAAvh4AAAAAAAApAAAAICAgICAgICAvLyBwcmludGxuISgiREVQVEgge2RlcHRoOj99OiIpOwo",
					"AQAAAAAAAAABAAAAvh4AAAAAAADnHgAAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					2,
					"right_delete",
					null,
					"AgAAAL8gAAAAAAAAvyAAAAAAAABiAAAAICAgICAgICAgICAgICAgIC8vIHByaW50bG4hKCJwYXJlbnRfZ3RmOiB7cGFyZW50X2d0Zn0iKTsKICAgICAgICAgICAgICAgIC8vIHByaW50bG4hKCJ0Zjoge3RmfSIpOwq/IAAAAAAAAL8gAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAvyAAAAAAAAAhIQAAAAAAAAAAAAAAAPC/"
				],
				[
					196,
					1,
					"right_delete",
					null,
					"AQAAAF8hAAAAAAAAXyEAAAAAAAAxAAAAICAgICAgICAgICAgLy8gcHJpbnRsbiEoIm5leHRfZ3RmOiB7bmV4dF9ndGZ9Iik7Cg",
					"AQAAAAAAAAABAAAAXyEAAAAAAACQIQAAAAAAAAAAAAAAAPC/"
				],
				[
					202,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABWIgAALy8gQ29weXJpZ2h0IDIwMjMgYnkgRGF2aWQgV2Vpa2Vyc2RvcmZlci4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KCnVzZSBjcmF0ZTo6KjsKdXNlIGV4Y2Vzczo6cHJlbHVkZTo6KjsKdXNlIG1hZ2lfZ2Vtczo6U2xvdFZlYzsKdXNlIHNpbXBsZWNzOjp7Q29tbWFuZHMsIE1vY2NhLCBRdWVyeSwgUmVsYXRpb24sIFdvcmxkfTsKdXNlIHN0ZDo6e2NtcDo6T3JkZXJpbmcsIG9wczo6RGVyZWZ9OwoKLy8vIENoYW5nZXMgdGhlIHBhcmVudCBvZiBgY2hpbGRgIHRvIGBwYXJlbnRgCiNbZGVyaXZlKENsb25lKV0KcHViIHN0cnVjdCBDaGFuZ2VIaWVyYXJjaHlDb21tYW5kIHsKICAgIHB1YiBwYXJlbnQ6IEVudGl0eSwKICAgIHB1YiBjaGlsZDogRW50aXR5LAp9CgovLy8gRGVzdHJveXMgYW4gZW50aXR5IGFuZCBwb3RlbnRpYWxseSBpdHMgZGVzY2VuZGVudHMuIE11c3QgYmUgYWRkZWQgdG8gdGhlIGVudGl0eSB0byBkZXN0cm95LgpwdWIgc3RydWN0IERlc3Ryb3lFbnRpdHlDb21tYW5kIHsKICAgIC8vLyBJZiBlbmFibGVkIGFsbCBkZXNjZW5kZW50cyBsaWtlIGNoaWxkcmVuLCBncmFuZC1jaGlsZHJlbiwgZXRjLiBhcmUgZGVzdHJveWVkLiBPdGhlcndpc2UKICAgIC8vLyB0aGUgZGlyZWN0IGNoaWxkcmVuIHdpbGwgYmVjb21lIHJvb3RzLgogICAgcHViIHJlY3Vyc2l2ZTogYm9vbCwKfQoKI1tkZXJpdmUoU2luZ2xldG9uKV0KcHViIHN0cnVjdCBSb290KEVudGl0eSk7CgppbXBsIERlcmVmIGZvciBSb290IHsKICAgIHR5cGUgVGFyZ2V0ID0gRW50aXR5OwoKICAgIGZuIGRlcmVmKCZzZWxmKSAtPiAmU2VsZjo6VGFyZ2V0IHsKICAgICAgICAmc2VsZi4wCiAgICB9Cn0KCnB1YiBzdHJ1Y3QgU2NlbmVUcmVlTW9jY2E7CgppbXBsIE1vY2NhIGZvciBTY2VuZVRyZWVNb2NjYSB7CiAgICBmbiBzdGFydCh3b3JsZDogJm11dCBXb3JsZCkgLT4gU2VsZiB7CiAgICAgICAgLy8gd29ybGQuc2V0X3NpbmdsZXRvbihTY2VuZVRyZWVVcGRhdGVXb3Jrc3BhY2U6OmRlZmF1bHQoKSk7CiAgICAgICAgd29ybGQuc2V0X3NpbmdsZXRvbihHcmFkZWRFbnRpdHlTdG9yYWdlOjpkZWZhdWx0KCkpOwoKICAgICAgICAvLyBjcmVhdGUgcm9vdAogICAgICAgIGxldCByb290ID0gd29ybGQKICAgICAgICAgICAgLnNwYXduKCgKICAgICAgICAgICAgICAgIE5hbWU6OmZyb21fc3RyKCJTY2VuZVRyZWVNb2NjYTo6cm9vdCIpLAogICAgICAgICAgICAgICAgSGllcmFyY2h5RGVwdGgoMCksCiAgICAgICAgICAgICAgICBUcmFuc2Zvcm0zOjppZGVudGl0eSgpLAogICAgICAgICAgICApKQogICAgICAgICAgICAuaWQoKTsKICAgICAgICB3b3JsZC5zZXRfc2luZ2xldG9uKFJvb3Qocm9vdCkpOwoKICAgICAgICBTZWxmCiAgICB9CgogICAgZm4gZmluaSgmbXV0IHNlbGYsIHdvcmxkOiAmbXV0IFdvcmxkKSB7CiAgICAgICAgLy8gd29ybGQucmVtb3ZlX3NpbmdsZXRvbjo6PFNjZW5lVHJlZVVwZGF0ZVdvcmtzcGFjZT4oKTsKICAgICAgICB3b3JsZC5yZW1vdmVfc2luZ2xldG9uOjo8R3JhZGVkRW50aXR5U3RvcmFnZT4oKTsKICAgIH0KCiAgICBmbiBzdGVwKCZtdXQgc2VsZiwgd29ybGQ6ICZtdXQgV29ybGQpIHsKICAgICAgICB3b3JsZC5ydW4oYXR0YWNoX3BhcmVudF9lbnRpdGllc190b19yb290KTsKICAgICAgICB3b3JsZC5ydW4oYXR0YWNoX3RyYW5zZm9ybV9lbnRpdGllc190b19yb290KTsKCiAgICAgICAgd29ybGQucnVuKGVuc3VyZV9oaWVyYXJjaHlfZGVwdGhfZXhpc3RzKTsKICAgICAgICB3b3JsZC5ydW4oY29tcHV0ZV9oaWVyYXJjaHlfZGVwdGgpOwoKICAgICAgICB3b3JsZC5ydW4oZXN0YWJsaXNoX2dsb2JhbF90cmFuc2Zvcm1fMik7CiAgICAgICAgd29ybGQucnVuKGdyYWRlX3RyYW5zZm9ybV8yX2VudGl0aWVzKTsKICAgICAgICB3b3JsZC5ydW4odXBkYXRlX2dsb2JhbF90cmFuc2Zvcm1fMik7CgogICAgICAgIHdvcmxkLnJ1bihlc3RhYmxpc2hfZ2xvYmFsX3RyYW5zZm9ybV8zKTsKICAgICAgICB3b3JsZC5ydW4oZ3JhZGVfdHJhbnNmb3JtXzNfZW50aXRpZXMpOwogICAgICAgIHdvcmxkLnJ1bih1cGRhdGVfZ2xvYmFsX3RyYW5zZm9ybV8zKTsKICAgIH0KfQoKLy8gI1tkZXJpdmUoU2luZ2xldG9uLCBEZWZhdWx0KV0KLy8gc3RydWN0IFNjZW5lVHJlZVVwZGF0ZVdvcmtzcGFjZSB7Ci8vICAgICB0YXNrczogVmVjPEVudGl0eT4sCi8vICAgICB0YXNrc19jaGFuZ2VfZW5hYmxlZDogVmVjPChFbnRpdHksIGJvb2wpPiwKLy8gfQoKI1tkZXJpdmUoU2luZ2xldG9uLCBEZWZhdWx0KV0Kc3RydWN0IEdyYWRlZEVudGl0eVN0b3JhZ2UgewogICAgZ3JhZGVzOiBTbG90VmVjPFZlYzxFbnRpdHk+PiwKfQoKaW1wbCBHcmFkZWRFbnRpdHlTdG9yYWdlIHsKICAgIHB1YiBmbiBjbGVhcigmbXV0IHNlbGYpIHsKICAgICAgICBmb3IgdiBpbiBzZWxmLmdyYWRlcy5pdGVyX211dCgpIHsKICAgICAgICAgICAgdi5jbGVhcigpOwogICAgICAgIH0KICAgIH0KCiAgICBwdWIgZm4gaW5zZXJ0KCZtdXQgc2VsZiwgZGVwdGg6IEhpZXJhcmNoeURlcHRoLCBlbnRpdHk6IEVudGl0eSkgewogICAgICAgIHNlbGYuZ3JhZGVzLmVudHJ5X29yX2RlZmF1bHQoZGVwdGguMCBhcyB1c2l6ZSkucHVzaChlbnRpdHkpOwogICAgfQoKICAgIHB1YiBmbiBpdGVyX2dyYWRlcygmc2VsZikgLT4gaW1wbCBJdGVyYXRvcjxJdGVtID0gKEhpZXJhcmNoeURlcHRoLCAmW0VudGl0eV0pPiB7CiAgICAgICAgc2VsZi5ncmFkZXMKICAgICAgICAgICAgLml0ZXIoKQogICAgICAgICAgICAuZW51bWVyYXRlKCkKICAgICAgICAgICAgLm1hcCh8KGksIHYpfCAoSGllcmFyY2h5RGVwdGgoaSBhcyB1MTYpLCB2LmFzX3NsaWNlKCkpKQogICAgfQoKICAgIHB1YiBmbiBpdGVyX2dyYWRlZCgmc2VsZikgLT4gaW1wbCBJdGVyYXRvcjxJdGVtID0gRW50aXR5PiArIHVzZTwnXz4gewogICAgICAgIHNlbGYuZ3JhZGVzCiAgICAgICAgICAgIC5pdGVyKCkKICAgICAgICAgICAgLmZsYXRfbWFwKHx2fCB2Lml0ZXIoKS5tYXAofCZlbnRpdHl8IGVudGl0eSkpCiAgICB9Cn0KCi8vLyBFbnRpdGllcyB3aXRoIGNoaWxkcmVuLCBidXQgd2l0aG91dCBwYXJlbnQgYXJlIGF0dGFjaGVkIHRvIHRoZSBnbG9iYWwgcm9vdApmbiBhdHRhY2hfcGFyZW50X2VudGl0aWVzX3RvX3Jvb3QoCiAgICByb290OiBTaW5nbGV0b25NdXQ8Um9vdD4sCiAgICBxdWVyeTogUXVlcnk8VGhpcz4sIC8vIFRPRE8gdXNlIG1vcmUgc29waGlzdGljYXRlZCBxdWVyeQogICAgY2hpbGRfb2Y6IFJlbGF0aW9uPENoaWxkT2Y+LAogICAgcGFyZW50X29mOiBSZWxhdGlvbjxQYXJlbnRPZj4sCiAgICBtdXQgY21kOiBDb21tYW5kcywKKSB7CiAgICBsZXQgcm9vdF9lbnRpdHkgPSAqKnJvb3Q7CiAgICBmb3IgZSBpbiBxdWVyeS5pdGVyKCkgewogICAgICAgIGlmIGNoaWxkX29mLmFueShlKSAmJiBwYXJlbnRfb2YuZ2V0KGUpLmlzX25vbmUoKSAmJiBlICE9IHJvb3RfZW50aXR5IHsKICAgICAgICAgICAgbG9nOjpkZWJ1ZyEoImF0dGFjaGVkIHtlfSB0byByb290IHtyb290X2VudGl0eX0iKTsKICAgICAgICAgICAgY21kLmVudGl0eShlKS5zZXQoKENoaWxkT2YsIHJvb3RfZW50aXR5KSk7CiAgICAgICAgfQogICAgfQp9CgovLy8gRW50aXRpZXMgd2l0aCB0cmFuc2Zvcm0sIGJ1dCB3aXRob3V0IHBhcmVudCBhcmUgYXR0YWNoZWQgdG8gdGhlIGdsb2JhbCByb290CmZuIGF0dGFjaF90cmFuc2Zvcm1fZW50aXRpZXNfdG9fcm9vdCgKICAgIHJvb3Q6IFNpbmdsZXRvbk11dDxSb290PiwKICAgIHF1ZXJ5OiBRdWVyeTxUaGlzLCBXaXRoPEdsb2JhbFRyYW5zZm9ybTM+PiwgLy8gVE9ETyB1c2UgbW9yZSBzb3BoaXN0aWNhdGVkIHF1ZXJ5CiAgICBwYXJlbnRfb2Y6IFJlbGF0aW9uPFBhcmVudE9mPiwKICAgIG11dCBjbWQ6IENvbW1hbmRzLAopIHsKICAgIGxldCByb290X2VudGl0eSA9ICoqcm9vdDsKICAgIGZvciBlIGluIHF1ZXJ5Lml0ZXIoKSB7CiAgICAgICAgaWYgcGFyZW50X29mLmdldChlKS5pc19ub25lKCkgJiYgZSAhPSByb290X2VudGl0eSB7CiAgICAgICAgICAgIGxvZzo6ZGVidWchKCJhdHRhY2hlZCB7ZX0gdG8gcm9vdCB7cm9vdF9lbnRpdHl9Iik7CiAgICAgICAgICAgIGNtZC5lbnRpdHkoZSkuc2V0KChDaGlsZE9mLCByb290X2VudGl0eSkpOwogICAgICAgIH0KICAgIH0KfQoKLy8vIEFsbCBlbnRpdGllcyB3aXRoIGEgcGFyZW50IG11c3QgaGF2ZSBhIEhpZXJhcmNoeURlcHRoCmZuIGVuc3VyZV9oaWVyYXJjaHlfZGVwdGhfZXhpc3RzKAogICAgcXVlcnk6IFF1ZXJ5PFRoaXMsIChXaXRob3V0PEhpZXJhcmNoeURlcHRoPiwgV2l0aDwoVGhpcywgQ2hpbGRPZiwgRTEpPik+LAogICAgbXV0IGNtZDogQ29tbWFuZHMsCikgewogICAgZm9yIGUgaW4gcXVlcnkuaXRlcigpIHsKICAgICAgICBjbWQuZW50aXR5KGUpLnNldChIaWVyYXJjaHlEZXB0aCgwKSk7CiAgICB9Cn0KCi8vLyBDb21wdXRlIGhpZXJhcmNoeSBkZXB0aApmbiBjb21wdXRlX2hpZXJhcmNoeV9kZXB0aCgKICAgIHF1ZXJ5X3BhcmVudF9jaGlsZDogUXVlcnk8KEUwLCBFMSksIChXaXRoPEhpZXJhcmNoeURlcHRoPiwgV2l0aDwoRTEsIENoaWxkT2YsIEUwKT4pPiwKICAgIG11dCBxdWVyeV9kZXB0aDogUXVlcnk8Jm11dCBIaWVyYXJjaHlEZXB0aD4sCikgewogICAgLy8gY29sbGVjdCBhbGwgcGFyZW50L2NoaWxkIHBhaXJzCiAgICBsZXQgbXV0IGl0ZW1zID0gVmVjOjpuZXcoKTsKICAgIGZvciAocGFyZW50LCBjaGlsZCkgaW4gcXVlcnlfcGFyZW50X2NoaWxkLml0ZXIoKSB7CiAgICAgICAgaXRlbXMucHVzaCgocGFyZW50LCBjaGlsZCkpOwogICAgfQoKICAgIC8vIHNvcnQgc3VjaCB0aGF0IHBhcmVudHMgY29tZSBiZWZvcmUgY2hpbGRyZW4KICAgIGl0ZW1zLnNvcnRfYnkofChwLCBjKSwgKGEsIGIpfCB7CiAgICAgICAgaWYgYiA9PSBwIHsKICAgICAgICAgICAgT3JkZXJpbmc6OkdyZWF0ZXIKICAgICAgICB9IGVsc2UgaWYgYSA9PSBjIHsKICAgICAgICAgICAgT3JkZXJpbmc6Okxlc3MKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBPcmRlcmluZzo6RXF1YWwKICAgICAgICB9CiAgICB9KTsKCiAgICAvLyBpdGVyYXRlIGluIG9yZGVyIGFuZCBjb21wdXRlIGRlcHRoCiAgICBmb3IgKHBhcmVudCwgY2hpbGQpIGluIGl0ZW1zLmludG9faXRlcigpIHsKICAgICAgICBsZXQgcGFyZW50X2RlcHRoID0gcXVlcnlfZGVwdGguZ2V0X211dChwYXJlbnQpLnVud3JhcCgpOwogICAgICAgICpxdWVyeV9kZXB0aC5nZXRfbXV0KGNoaWxkKS51bndyYXAoKSA9IHBhcmVudF9kZXB0aC5pbmMoKTsKICAgIH0KfQoKLy8vIEVhY2ggZW50aXR5IHdpdGggVHJhbnNmb3JtMiBhbHNvIGhhcyBhIFN0ZXAgMQpmbiBlc3RhYmxpc2hfZ2xvYmFsX3RyYW5zZm9ybV8yKAogICAgcXVlcnk6IFF1ZXJ5PFRoaXMsIChXaXRoPFRyYW5zZm9ybTI+LCBXaXRob3V0PEdsb2JhbFRyYW5zZm9ybTI+KT4sCiAgICBtdXQgY21kOiBDb21tYW5kcywKKSB7CiAgICBmb3IgZSBpbiBxdWVyeS5pdGVyKCkgewogICAgICAgIGNtZC5lbnRpdHkoZSkuc2V0KEdsb2JhbFRyYW5zZm9ybTI6OmRlZmF1bHQoKSk7CiAgICB9Cn0KCi8vLyBFYWNoIGVudGl0eSB3aXRoIFRyYW5zZm9ybTMgYWxzbyBoYXMgYSBHbG9iYWxUcmFuc2Zvcm0zCmZuIGVzdGFibGlzaF9nbG9iYWxfdHJhbnNmb3JtXzMoCiAgICBxdWVyeTogUXVlcnk8VGhpcywgKFdpdGg8VHJhbnNmb3JtMz4sIFdpdGhvdXQ8R2xvYmFsVHJhbnNmb3JtMz4pPiwKICAgIG11dCBjbWQ6IENvbW1hbmRzLAopIHsKICAgIGZvciBlIGluIHF1ZXJ5Lml0ZXIoKSB7CiAgICAgICAgY21kLmVudGl0eShlKS5zZXQoR2xvYmFsVHJhbnNmb3JtMzo6ZGVmYXVsdCgpKTsKICAgIH0KfQoKLy8vIEdyYWRlIHRyYW5zZm9ybSBlbnRpdGllcyBieSBoaWVyYXJjaHkgZGVwdGgKZm4gZ3JhZGVfdHJhbnNmb3JtXzJfZW50aXRpZXMoCiAgICBtdXQgZ3JhZGVzOiBTaW5nbGV0b25NdXQ8R3JhZGVkRW50aXR5U3RvcmFnZT4sCiAgICBxdWVyeTogUXVlcnk8KFRoaXMsICZIaWVyYXJjaHlEZXB0aCksIFdpdGg8VHJhbnNmb3JtMj4+LAopIHsKICAgIGdyYWRlcy5jbGVhcigpOwoKICAgIGZvciAoZSwgZGVwdGgpIGluIHF1ZXJ5Lml0ZXIoKSB7CiAgICAgICAgZ3JhZGVzLmluc2VydCgqZGVwdGgsIGUpOwogICAgfQp9CgovLy8gR3JhZGUgdHJhbnNmb3JtIGVudGl0aWVzIGJ5IGhpZXJhcmNoeSBkZXB0aApmbiBncmFkZV90cmFuc2Zvcm1fM19lbnRpdGllcygKICAgIG11dCBncmFkZXM6IFNpbmdsZXRvbk11dDxHcmFkZWRFbnRpdHlTdG9yYWdlPiwKICAgIHF1ZXJ5OiBRdWVyeTwoVGhpcywgJkhpZXJhcmNoeURlcHRoKSwgV2l0aDxUcmFuc2Zvcm0zPj4sCikgewogICAgZ3JhZGVzLmNsZWFyKCk7CgogICAgZm9yIChlLCBkZXB0aCkgaW4gcXVlcnkuaXRlcigpIHsKICAgICAgICBncmFkZXMuaW5zZXJ0KCpkZXB0aCwgZSk7CiAgICB9Cn0KCi8vLyBDb21wdXRlcyBnbG9iYWwgdHJhbnNmb3JtIGJhc2VkIG9uIHBhcmVudCBzdGFydGluZyBhdCB0aGUgdG9wIG9mIHRoZSBoaWVyYXJjaHkKZm4gdXBkYXRlX2dsb2JhbF90cmFuc2Zvcm1fMigKICAgIGdyYWRlczogU2luZ2xldG9uTXV0PEdyYWRlZEVudGl0eVN0b3JhZ2U+LAogICAgcXVlcnlfdGY6IFF1ZXJ5PCZUcmFuc2Zvcm0yPiwKICAgIG11dCBxdWVyeV9ndGY6IFF1ZXJ5PCZtdXQgR2xvYmFsVHJhbnNmb3JtMj4sCiAgICBwYXJlbnRfb2Y6IFJlbGF0aW9uPFBhcmVudE9mPiwKKSB7CiAgICBmb3IgZSBpbiBncmFkZXMuaXRlcl9ncmFkZWQoKSB7CiAgICAgICAgbGV0IFNvbWUodGYpID0gcXVlcnlfdGYuZ2V0KGUpIGVsc2UgewogICAgICAgICAgICAvLyBzaG91bGQgbm90IGhhcHBlbgogICAgICAgICAgICBlcHJpbnRsbiEoIm5vIFRyYW5zZm9ybTIgZm9yIHtlOj99Iik7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH07CgogICAgICAgIGxldCBuZXh0X2d0ZiA9IGlmIGxldCBTb21lKHBhcmVudCkgPSBwYXJlbnRfb2YuZ2V0KGUpIHsKICAgICAgICAgICAgbGV0IFNvbWUocGFyZW50X2d0ZikgPSBxdWVyeV9ndGYuZ2V0X211dChwYXJlbnQpIGVsc2UgewogICAgICAgICAgICAgICAgLy8gc2hvdWxkIG5vdCBoYXBwZW4KICAgICAgICAgICAgICAgIGVwcmludGxuISgibm90IEdsb2JhbFRyYW5zZm9ybTIgb24gcGFyZW50IHtlOj99Iik7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIHRmICogcGFyZW50X2d0ZgogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIC8vIG5vIHBhcmVudDogc2hvdWxkIG5vdCBoYXBwZW4KICAgICAgICAgICAgR2xvYmFsVHJhbnNmb3JtMih0Zi5pbnRvKCkpCiAgICAgICAgfTsKCiAgICAgICAgbGV0IFNvbWUoZ3RmKSA9IHF1ZXJ5X2d0Zi5nZXRfbXV0KGUpIGVsc2UgewogICAgICAgICAgICAvLyBzaG91bGQgbm90IGhhcHBlbgogICAgICAgICAgICBlcHJpbnRsbiEoIm5vdCBHbG9iYWxUcmFuc2Zvcm0yIG9uIHNlbGYge2U6P30iKTsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgfTsKCiAgICAgICAgKmd0ZiA9IG5leHRfZ3RmOwogICAgfQp9CgovLy8gQ29tcHV0ZXMgZ2xvYmFsIHRyYW5zZm9ybSBiYXNlZCBvbiBwYXJlbnQgc3RhcnRpbmcgYXQgdGhlIHRvcCBvZiB0aGUgaGllcmFyY2h5CmZuIHVwZGF0ZV9nbG9iYWxfdHJhbnNmb3JtXzMoCiAgICBncmFkZXM6IFNpbmdsZXRvbk11dDxHcmFkZWRFbnRpdHlTdG9yYWdlPiwKICAgIHF1ZXJ5X3RmOiBRdWVyeTwmVHJhbnNmb3JtMz4sCiAgICBtdXQgcXVlcnlfZ3RmOiBRdWVyeTwmbXV0IEdsb2JhbFRyYW5zZm9ybTM+LAogICAgcGFyZW50X29mOiBSZWxhdGlvbjxQYXJlbnRPZj4sCikgewogICAgZm9yIChfZGVwdGgsIGVudGl0aWVzKSBpbiBncmFkZXMuaXRlcl9ncmFkZXMoKSB7CiAgICAgICAgZm9yICZlIGluIGVudGl0aWVzIHsKICAgICAgICAgICAgbGV0IFNvbWUodGYpID0gcXVlcnlfdGYuZ2V0KGUpIGVsc2UgewogICAgICAgICAgICAgICAgLy8gc2hvdWxkIG5vdCBoYXBwZW4KICAgICAgICAgICAgICAgIGVwcmludGxuISgibm8gVHJhbnNmb3JtMyBmb3Ige2U6P30iKTsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgbGV0IG5leHRfZ3RmID0gaWYgbGV0IFNvbWUocGFyZW50KSA9IHBhcmVudF9vZi5nZXQoZSkgewogICAgICAgICAgICAgICAgbGV0IFNvbWUocGFyZW50X2d0ZikgPSBxdWVyeV9ndGYuZ2V0X211dChwYXJlbnQpIGVsc2UgewogICAgICAgICAgICAgICAgICAgIC8vIHNob3VsZCBub3QgaGFwcGVuCiAgICAgICAgICAgICAgICAgICAgZXByaW50bG4hKCJubyBHbG9iYWxUcmFuc2Zvcm0zIG9uIHBhcmVudCB7ZTo/fSIpOwogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICB0ZiAqIHBhcmVudF9ndGYKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIG5vIHBhcmVudDogc2hvdWxkIG5vdCBoYXBwZW4KICAgICAgICAgICAgICAgIEdsb2JhbFRyYW5zZm9ybTModGYuaW50bygpKQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgbGV0IFNvbWUoZ3RmKSA9IHF1ZXJ5X2d0Zi5nZXRfbXV0KGUpIGVsc2UgewogICAgICAgICAgICAgICAgLy8gc2hvdWxkIG5vdCBoYXBwZW4KICAgICAgICAgICAgICAgIGVwcmludGxuISgibm8gR2xvYmFsVHJhbnNmb3JtMyBvbiBzZWxmIHtlOj99Iik7CiAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICpndGYgPSBuZXh0X2d0ZjsKICAgICAgICB9CiAgICB9Cn0KAAAAAAAAAABQHgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9BoAAAAAAAD0GgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/I/Ikabur/candy/crates/candy/src/renderer/renderer.rs",
			"settings":
			{
				"buffer_size": 16008,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					156,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAEgQAAAAAAAASBAAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAEgQAAAAAAAASBAAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAEgQAAAAAAAASBAAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAEgQAAAAAAAASBAAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAEgQAAAAAAAASBAAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAEgQAAAAAAAASBAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/I/Ikabur/candy/crates/candy/src/asset_library.rs",
			"settings":
			{
				"buffer_size": 14159,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					9,
					1,
					"rust_fmt_format_buffer",
					null,
					"BQAAABEAAAAAAAAAEQAAAAAAAAAQAAAATWVzaEZpbHRlciwKICAgIBgAAAAAAAAAGAAAAAAAAAAAAAAAJAEAAAAAAAA0AQAAAAAAAAAAAABaAQAAAAAAAGYBAAAAAAAAAAAAAHwBAAAAAAAAfAEAAAAAAAAMAAAALCBiYWlsLCBleXJl",
					"AQAAAAAAAAABAAAAxAMAAAAAAADEAwAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA+Q0AAAAAAAD8DQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA+Q0AAAAAAAD8DQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA+Q0AAAAAAAD8DQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/I/Ikabur/candy/crates/candy/examples/cactus.rs",
			"settings":
			{
				"buffer_size": 2793,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"BQAAAEgGAAAAAAAASwYAAAAAAAAAAAAAMAYAAAAAAAAzBgAAAAAAAAAAAAAXBgAAAAAAABoGAAAAAAAAAAAAALkFAAAAAAAAvAUAAAAAAAAAAAAAmgUAAAAAAACdBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwYAAAAAAAChBQAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB0BgAAdXNlIGNhbmR5Ojp7Q2FtZXJhLCBDYW5keU1vY2NhLCBHbHRmTm9kZX07CnVzZSBjYW5keV9wcmltczo6e0NhbWVyYUxpbmssIEltYWdlTG9jYXRpb24sIEltYWdlU2hhcGUsIFdpbmRvd0RlZiwgV2luZG93TGF5b3V0fTsKdXNlIGZvdW5kYXRpb246OlRpbWVNb2NjYTsKdXNlIGdsYW06OlZlYzM7CnVzZSBzaW1wbGVjczo6cHJlbHVkZTo6KjsKdXNlIHN0ZDo6cGF0aDo6UGF0aEJ1ZjsKCmZuIG1haW4oKSAtPiBleXJlOjpSZXN1bHQ8KCk+IHsKICAgIGVudl9sb2dnZXI6OmluaXQoKTsKICAgIGxldCBtdXQgYXBwID0gY2FuZHk6OkFwcDo6bmV3KCk7CiAgICBhcHAubG9hZF9tb2NjYTo6PENhbmR5RXhhbXBsZUNhY3R1c01vY2NhPigpOwogICAgYXBwLnJ1bigpCn0KCnN0cnVjdCBDYW5keUV4YW1wbGVDYWN0dXNNb2NjYSB7fQoKaW1wbCBNb2NjYSBmb3IgQ2FuZHlFeGFtcGxlQ2FjdHVzTW9jY2EgewogICAgZm4gbG9hZChtdXQgZGVwczogTW9jY2FEZXBzKSB7CiAgICAgICAgZGVwcy5kZXBlbmRzX29uOjo8VGltZU1vY2NhPigpOwogICAgICAgIGRlcHMuZGVwZW5kc19vbjo6PENhbmR5TW9jY2E+KCk7CiAgICB9CgogICAgZm4gc3RhcnQod29ybGQ6ICZtdXQgV29ybGQpIC0+IFNlbGYgewogICAgICAgIGxldCBjYW0gPSB3b3JsZAogICAgICAgICAgICAuc3Bhd24oQ2FtZXJhOjpsb29rX2F0X3p1cCgKICAgICAgICAgICAgICAgIFZlYzM6Om5ldygxLjksIC00LjIsIDMuKSwKICAgICAgICAgICAgICAgIFZlYzM6Om5ldygwLiwgMC4sIDAuKSwKICAgICAgICAgICAgKSkKICAgICAgICAgICAgLmlkKCk7CgogICAgICAgIGxldCBfd2luID0gd29ybGQKICAgICAgICAgICAgLnNwYXduKCgKICAgICAgICAgICAgICAgIFdpbmRvd0RlZiB7CiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICJDYW5keTogQ2FjdHVzIi50b19zdHJpbmcoKSwKICAgICAgICAgICAgICAgICAgICBsYXlvdXQ6IFdpbmRvd0xheW91dCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlOiBJbWFnZVNoYXBlOjpmcm9tX3dpZHRoX2hlaWdodCgxOTIwLiwgMTA4MC4pLAogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogSW1hZ2VMb2NhdGlvbjo6ZnJvbV9ob3Jpem9udGFsX3ZlcnRpY2FsKDIwMC4sIDIwMC4pLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgKENhbWVyYUxpbmssIGNhbSksCiAgICAgICAgICAgICkpCiAgICAgICAgICAgIC5pZCgpOwoKICAgICAgICB3b3JsZC5zcGF3bihHbHRmTm9kZSB7CiAgICAgICAgICAgIHBhdGg6IFBhdGhCdWY6OmZyb20oIkk6L0lrYWJ1ci9jYW5keS9jcmF0ZXMvY2FuZHkvZXhhbXBsZXMvY2FjdHVzLmdsYiIpLAogICAgICAgICAgICBzY2VuZTogTm9uZSwKICAgICAgICAgICAgbm9kZTogTm9uZSwKICAgICAgICB9KTsKCiAgICAgICAgLy8gd29ybGQuc3Bhd24oR2x0Zk5vZGUgewogICAgICAgIC8vICAgICBwYXRoOiBQYXRoQnVmOjpmcm9tKCJJOi9Ja2FidXIvY2FuZHkvY3JhdGVzL2NhbmR5L2V4YW1wbGVzL3NwYWNlX29ya193aDQway5nbGIiKSwKICAgICAgICAvLyAgICAgc2NlbmU6IE5vbmUsCiAgICAgICAgLy8gICAgIG5vZGU6IE5vbmUsCiAgICAgICAgLy8gfSk7CgogICAgICAgIFNlbGYge30KICAgIH0KfQoAAAAAAAAAAIsJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgYAAAAAAACkBQAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACLCQAAdXNlIGNhbmR5Ojp7Q2FtZXJhLCBDYW5keU1vY2NhLCBHbHRmTm9kZX07CnVzZSBjYW5keV9wcmltczo6e0NhbWVyYUxpbmssIEltYWdlTG9jYXRpb24sIEltYWdlU2hhcGUsIFdpbmRvd0RlZiwgV2luZG93TGF5b3V0fTsKdXNlIGZvdW5kYXRpb246OlRpbWVNb2NjYTsKdXNlIGdsYW06OlZlYzM7CnVzZSBzY2VuZV90cmVlOjpUcmFuc2Zvcm0zOwp1c2Ugc2ltcGxlY3M6OnByZWx1ZGU6Oio7CnVzZSBzdGQ6OnBhdGg6OlBhdGhCdWY7CgpmbiBtYWluKCkgLT4gZXlyZTo6UmVzdWx0PCgpPiB7CiAgICBlbnZfbG9nZ2VyOjppbml0KCk7CiAgICBsZXQgbXV0IGFwcCA9IGNhbmR5OjpBcHA6Om5ldygpOwogICAgYXBwLmxvYWRfbW9jY2E6OjxDYW5keUV4YW1wbGVDYWN0dXNNb2NjYT4oKTsKICAgIGFwcC5ydW4oKQp9CgpzdHJ1Y3QgQ2FuZHlFeGFtcGxlQ2FjdHVzTW9jY2Ege30KCmltcGwgTW9jY2EgZm9yIENhbmR5RXhhbXBsZUNhY3R1c01vY2NhIHsKICAgIGZuIGxvYWQobXV0IGRlcHM6IE1vY2NhRGVwcykgewogICAgICAgIGRlcHMuZGVwZW5kc19vbjo6PFRpbWVNb2NjYT4oKTsKICAgICAgICBkZXBzLmRlcGVuZHNfb246OjxDYW5keU1vY2NhPigpOwogICAgfQoKICAgIGZuIHN0YXJ0KHdvcmxkOiAmbXV0IFdvcmxkKSAtPiBTZWxmIHsKICAgICAgICBsZXQgY2FtID0gd29ybGQKICAgICAgICAgICAgLnNwYXduKENhbWVyYTo6bG9va19hdF96dXAoCiAgICAgICAgICAgICAgICBWZWMzOjpuZXcoMS45LCAtNC4yLCAzLiksCiAgICAgICAgICAgICAgICBWZWMzOjpuZXcoMC4sIDAuLCAwLiksCiAgICAgICAgICAgICkpCiAgICAgICAgICAgIC5pZCgpOwoKICAgICAgICBsZXQgX3dpbiA9IHdvcmxkCiAgICAgICAgICAgIC5zcGF3bigoCiAgICAgICAgICAgICAgICBXaW5kb3dEZWYgewogICAgICAgICAgICAgICAgICAgIHRpdGxlOiAiQ2FuZHk6IENhY3R1cyIudG9fc3RyaW5nKCksCiAgICAgICAgICAgICAgICAgICAgbGF5b3V0OiBXaW5kb3dMYXlvdXQgewogICAgICAgICAgICAgICAgICAgICAgICBzaGFwZTogSW1hZ2VTaGFwZTo6ZnJvbV93aWR0aF9oZWlnaHQoMTkyMC4sIDEwODAuKSwKICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IEltYWdlTG9jYXRpb246OmZyb21faG9yaXpvbnRhbF92ZXJ0aWNhbCgyMDAuLCAyMDAuKSwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIChDYW1lcmFMaW5rLCBjYW0pLAogICAgICAgICAgICApKQogICAgICAgICAgICAuaWQoKTsKCiAgICAgICAgbGV0IGFzbGkgPSB3b3JsZC5zaW5nbGV0b246OjxBc3NldExpYnJhcnk+KCk7CgogICAgICAgIGxldCBjYWN0dXNfYWlkID0gQXNzZXRVaWQ6Om5ldygiY2FjdHVzIik7CiAgICAgICAgYXNsaS5sb2FkX2dsdGYoCiAgICAgICAgICAgIGNhY3R1c19haWQsCiAgICAgICAgICAgIEdsdGZBc3NldERlc2NyaXB0b3IgewogICAgICAgICAgICAgICAgcGF0aDogUGF0aEJ1Zjo6ZnJvbSgiSTovSWthYnVyL2NhbmR5L2NyYXRlcy9jYW5keS9leGFtcGxlcy9jYWN0dXMuZ2xiIiksCiAgICAgICAgICAgICAgICBzY2VuZTogTm9uZSwKICAgICAgICAgICAgICAgIG5vZGU6IE5vbmUsCiAgICAgICAgICAgIH0sCiAgICAgICAgKTsKCiAgICAgICAgbGV0IG9ya19haWQgPSBBc3NldFVpZDo6bmV3KCJzcGFjZV9vcmtfd2g0MGsiKTsKICAgICAgICBhc2xpLmxvYWRfZ2x0ZigKICAgICAgICAgICAgb3JrX2FpZCwKICAgICAgICAgICAgR2x0ZkFzc2V0RGVzY3JpcHRvciB7CiAgICAgICAgICAgICAgICBwYXRoOiBQYXRoQnVmOjpmcm9tKCJJOi9Ja2FidXIvY2FuZHkvY3JhdGVzL2NhbmR5L2V4YW1wbGVzL3NwYWNlX29ya193aDQway5nbGIiKSwKICAgICAgICAgICAgICAgIHNjZW5lOiBOb25lLAogICAgICAgICAgICAgICAgbm9kZTogTm9uZSwKICAgICAgICAgICAgfSwKICAgICAgICApOwoKICAgICAgICBmb3IgaSBpbiAtNS4uNSB7CiAgICAgICAgICAgIGZvciBqIGluIC01Li41IHsKICAgICAgICAgICAgICAgIGxldCBlbnRpdHkgPSBhc2xpLmluc3RhbnRpYXRlKGNhY3R1c19haWQsICZtdXQgY21kcykuYW5kX3NldCgKICAgICAgICAgICAgICAgICAgICBUcmFuc2Zvcm0zOjpmcm9tX3RyYW5zbGF0aW9uX3h5eihpIGFzIGYzMiAqIDIuLCBqIGFzIGYzMiAqIDIuLCAwLiksCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyB3b3JsZC5zcGF3bihHbHRmTm9kZSB7CiAgICAgICAgLy8gICAgIHBhdGg6IFBhdGhCdWY6OmZyb20oIkk6L0lrYWJ1ci9jYW5keS9jcmF0ZXMvY2FuZHkvZXhhbXBsZXMvc3BhY2Vfb3JrX3doNDBrLmdsYiIpLAogICAgICAgIC8vICAgICBzY2VuZTogTm9uZSwKICAgICAgICAvLyAgICAgbm9kZTogTm9uZSwKICAgICAgICAvLyB9KTsKCiAgICAgICAgU2VsZiB7fQogICAgfQp9CgAAAAAAAAAAiwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgYAAAAAAACkBQAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACLCQAAdXNlIGNhbmR5Ojp7Q2FtZXJhLCBDYW5keU1vY2NhLCBHbHRmTm9kZX07CnVzZSBjYW5keV9wcmltczo6e0NhbWVyYUxpbmssIEltYWdlTG9jYXRpb24sIEltYWdlU2hhcGUsIFdpbmRvd0RlZiwgV2luZG93TGF5b3V0fTsKdXNlIGZvdW5kYXRpb246OlRpbWVNb2NjYTsKdXNlIGdsYW06OlZlYzM7CnVzZSBzY2VuZV90cmVlOjpUcmFuc2Zvcm0zOwp1c2Ugc2ltcGxlY3M6OnByZWx1ZGU6Oio7CnVzZSBzdGQ6OnBhdGg6OlBhdGhCdWY7CgpmbiBtYWluKCkgLT4gZXlyZTo6UmVzdWx0PCgpPiB7CiAgICBlbnZfbG9nZ2VyOjppbml0KCk7CiAgICBsZXQgbXV0IGFwcCA9IGNhbmR5OjpBcHA6Om5ldygpOwogICAgYXBwLmxvYWRfbW9jY2E6OjxDYW5keUV4YW1wbGVDYWN0dXNNb2NjYT4oKTsKICAgIGFwcC5ydW4oKQp9CgpzdHJ1Y3QgQ2FuZHlFeGFtcGxlQ2FjdHVzTW9jY2Ege30KCmltcGwgTW9jY2EgZm9yIENhbmR5RXhhbXBsZUNhY3R1c01vY2NhIHsKICAgIGZuIGxvYWQobXV0IGRlcHM6IE1vY2NhRGVwcykgewogICAgICAgIGRlcHMuZGVwZW5kc19vbjo6PFRpbWVNb2NjYT4oKTsKICAgICAgICBkZXBzLmRlcGVuZHNfb246OjxDYW5keU1vY2NhPigpOwogICAgfQoKICAgIGZuIHN0YXJ0KHdvcmxkOiAmbXV0IFdvcmxkKSAtPiBTZWxmIHsKICAgICAgICBsZXQgY2FtID0gd29ybGQKICAgICAgICAgICAgLnNwYXduKENhbWVyYTo6bG9va19hdF96dXAoCiAgICAgICAgICAgICAgICBWZWMzOjpuZXcoMS45LCAtNC4yLCAzLiksCiAgICAgICAgICAgICAgICBWZWMzOjpuZXcoMC4sIDAuLCAwLiksCiAgICAgICAgICAgICkpCiAgICAgICAgICAgIC5pZCgpOwoKICAgICAgICBsZXQgX3dpbiA9IHdvcmxkCiAgICAgICAgICAgIC5zcGF3bigoCiAgICAgICAgICAgICAgICBXaW5kb3dEZWYgewogICAgICAgICAgICAgICAgICAgIHRpdGxlOiAiQ2FuZHk6IENhY3R1cyIudG9fc3RyaW5nKCksCiAgICAgICAgICAgICAgICAgICAgbGF5b3V0OiBXaW5kb3dMYXlvdXQgewogICAgICAgICAgICAgICAgICAgICAgICBzaGFwZTogSW1hZ2VTaGFwZTo6ZnJvbV93aWR0aF9oZWlnaHQoMTkyMC4sIDEwODAuKSwKICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IEltYWdlTG9jYXRpb246OmZyb21faG9yaXpvbnRhbF92ZXJ0aWNhbCgyMDAuLCAyMDAuKSwKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIChDYW1lcmFMaW5rLCBjYW0pLAogICAgICAgICAgICApKQogICAgICAgICAgICAuaWQoKTsKCiAgICAgICAgbGV0IGFzbGkgPSB3b3JsZC5zaW5nbGV0b246OjxBc3NldExpYnJhcnk+KCk7CgogICAgICAgIGxldCBjYWN0dXNfYWlkID0gQXNzZXRVaWQ6Om5ldygiY2FjdHVzIik7CiAgICAgICAgYXNsaS5sb2FkX2dsdGYoCiAgICAgICAgICAgIGNhY3R1c19haWQsCiAgICAgICAgICAgIEdsdGZBc3NldERlc2NyaXB0b3IgewogICAgICAgICAgICAgICAgcGF0aDogUGF0aEJ1Zjo6ZnJvbSgiSTovSWthYnVyL2NhbmR5L2NyYXRlcy9jYW5keS9leGFtcGxlcy9jYWN0dXMuZ2xiIiksCiAgICAgICAgICAgICAgICBzY2VuZTogTm9uZSwKICAgICAgICAgICAgICAgIG5vZGU6IE5vbmUsCiAgICAgICAgICAgIH0sCiAgICAgICAgKTsKCiAgICAgICAgbGV0IG9ya19haWQgPSBBc3NldFVpZDo6bmV3KCJzcGFjZV9vcmtfd2g0MGsiKTsKICAgICAgICBhc2xpLmxvYWRfZ2x0ZigKICAgICAgICAgICAgb3JrX2FpZCwKICAgICAgICAgICAgR2x0ZkFzc2V0RGVzY3JpcHRvciB7CiAgICAgICAgICAgICAgICBwYXRoOiBQYXRoQnVmOjpmcm9tKCJJOi9Ja2FidXIvY2FuZHkvY3JhdGVzL2NhbmR5L2V4YW1wbGVzL3NwYWNlX29ya193aDQway5nbGIiKSwKICAgICAgICAgICAgICAgIHNjZW5lOiBOb25lLAogICAgICAgICAgICAgICAgbm9kZTogTm9uZSwKICAgICAgICAgICAgfSwKICAgICAgICApOwoKICAgICAgICBmb3IgaSBpbiAtNS4uNSB7CiAgICAgICAgICAgIGZvciBqIGluIC01Li41IHsKICAgICAgICAgICAgICAgIGxldCBlbnRpdHkgPSBhc2xpLmluc3RhbnRpYXRlKGNhY3R1c19haWQsICZtdXQgY21kcykuYW5kX3NldCgKICAgICAgICAgICAgICAgICAgICBUcmFuc2Zvcm0zOjpmcm9tX3RyYW5zbGF0aW9uX3h5eihpIGFzIGYzMiAqIDIuLCBqIGFzIGYzMiAqIDIuLCAwLiksCiAgICAgICAgICAgICAgICApOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICAvLyB3b3JsZC5zcGF3bihHbHRmTm9kZSB7CiAgICAgICAgLy8gICAgIHBhdGg6IFBhdGhCdWY6OmZyb20oIkk6L0lrYWJ1ci9jYW5keS9jcmF0ZXMvY2FuZHkvZXhhbXBsZXMvc3BhY2Vfb3JrX3doNDBrLmdsYiIpLAogICAgICAgIC8vICAgICBzY2VuZTogTm9uZSwKICAgICAgICAvLyAgICAgbm9kZTogTm9uZSwKICAgICAgICAvLyB9KTsKCiAgICAgICAgU2VsZiB7fQogICAgfQp9CgAAAAAAAAAA7wkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAQAAAAAAAAUBAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADvCQAAdXNlIGNhbmR5Ojp7QXNzZXRMaWJyYXJ5LCBBc3NldFVpZCwgQ2FtZXJhLCBDYW5keU1vY2NhLCBHbHRmQXNzZXREZXNjcmlwdG9yfTsKdXNlIGNhbmR5X3ByaW1zOjp7Q2FtZXJhTGluaywgSW1hZ2VMb2NhdGlvbiwgSW1hZ2VTaGFwZSwgV2luZG93RGVmLCBXaW5kb3dMYXlvdXR9Owp1c2UgZm91bmRhdGlvbjo6VGltZU1vY2NhOwp1c2UgZ2xhbTo6VmVjMzsKdXNlIHNjZW5lX3RyZWU6OlRyYW5zZm9ybTM7CnVzZSBzaW1wbGVjczo6cHJlbHVkZTo6KjsKdXNlIHN0ZDo6cGF0aDo6UGF0aEJ1ZjsKCmZuIG1haW4oKSAtPiBleXJlOjpSZXN1bHQ8KCk+IHsKICAgIGVudl9sb2dnZXI6OmluaXQoKTsKICAgIGxldCBtdXQgYXBwID0gY2FuZHk6OkFwcDo6bmV3KCk7CiAgICBhcHAubG9hZF9tb2NjYTo6PENhbmR5RXhhbXBsZUNhY3R1c01vY2NhPigpOwogICAgYXBwLnJ1bigpCn0KCnN0cnVjdCBDYW5keUV4YW1wbGVDYWN0dXNNb2NjYSB7fQoKaW1wbCBNb2NjYSBmb3IgQ2FuZHlFeGFtcGxlQ2FjdHVzTW9jY2EgewogICAgZm4gbG9hZChtdXQgZGVwczogTW9jY2FEZXBzKSB7CiAgICAgICAgZGVwcy5kZXBlbmRzX29uOjo8VGltZU1vY2NhPigpOwogICAgICAgIGRlcHMuZGVwZW5kc19vbjo6PENhbmR5TW9jY2E+KCk7CiAgICB9CgogICAgZm4gc3RhcnQod29ybGQ6ICZtdXQgV29ybGQpIC0+IFNlbGYgewogICAgICAgIGxldCBjYW0gPSB3b3JsZAogICAgICAgICAgICAuc3Bhd24oQ2FtZXJhOjpsb29rX2F0X3p1cCgKICAgICAgICAgICAgICAgIFZlYzM6Om5ldygxLjksIC00LjIsIDMuKSwKICAgICAgICAgICAgICAgIFZlYzM6Om5ldygwLiwgMC4sIDAuKSwKICAgICAgICAgICAgKSkKICAgICAgICAgICAgLmlkKCk7CgogICAgICAgIGxldCBfd2luID0gd29ybGQKICAgICAgICAgICAgLnNwYXduKCgKICAgICAgICAgICAgICAgIFdpbmRvd0RlZiB7CiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICJDYW5keTogQ2FjdHVzIi50b19zdHJpbmcoKSwKICAgICAgICAgICAgICAgICAgICBsYXlvdXQ6IFdpbmRvd0xheW91dCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlOiBJbWFnZVNoYXBlOjpmcm9tX3dpZHRoX2hlaWdodCgxOTIwLiwgMTA4MC4pLAogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogSW1hZ2VMb2NhdGlvbjo6ZnJvbV9ob3Jpem9udGFsX3ZlcnRpY2FsKDIwMC4sIDIwMC4pLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgKENhbWVyYUxpbmssIGNhbSksCiAgICAgICAgICAgICkpCiAgICAgICAgICAgIC5pZCgpOwoKICAgICAgICBsZXQgYXNsaSA9IHdvcmxkLnNpbmdsZXRvbjo6PEFzc2V0TGlicmFyeT4oKTsKCiAgICAgICAgbGV0IGNhY3R1c19haWQgPSBBc3NldFVpZDo6ZnJvbV9zdHIoImNhY3R1cyIpOwogICAgICAgIGFzbGkubG9hZF9nbHRmKAogICAgICAgICAgICBjYWN0dXNfYWlkLAogICAgICAgICAgICBHbHRmQXNzZXREZXNjcmlwdG9yIHsKICAgICAgICAgICAgICAgIHBhdGg6IFBhdGhCdWY6OmZyb20oIkk6L0lrYWJ1ci9jYW5keS9jcmF0ZXMvY2FuZHkvZXhhbXBsZXMvY2FjdHVzLmdsYiIpLAogICAgICAgICAgICAgICAgc2NlbmU6IE5vbmUsCiAgICAgICAgICAgICAgICBub2RlOiBOb25lLAogICAgICAgICAgICB9LAogICAgICAgICAgICAmbXV0IGNtZHMsCiAgICAgICAgKTsKCiAgICAgICAgbGV0IG9ya19haWQgPSBBc3NldFVpZDo6ZnJvbV9zdHIoInNwYWNlX29ya193aDQwayIpOwogICAgICAgIGFzbGkubG9hZF9nbHRmKAogICAgICAgICAgICBvcmtfYWlkLAogICAgICAgICAgICBHbHRmQXNzZXREZXNjcmlwdG9yIHsKICAgICAgICAgICAgICAgIHBhdGg6IFBhdGhCdWY6OmZyb20oIkk6L0lrYWJ1ci9jYW5keS9jcmF0ZXMvY2FuZHkvZXhhbXBsZXMvc3BhY2Vfb3JrX3doNDBrLmdsYiIpLAogICAgICAgICAgICAgICAgc2NlbmU6IE5vbmUsCiAgICAgICAgICAgICAgICBub2RlOiBOb25lLAogICAgICAgICAgICB9LAogICAgICAgICAgICAmbXV0IGNtZHMsCiAgICAgICAgKTsKCiAgICAgICAgZm9yIGkgaW4gLTUuLjUgewogICAgICAgICAgICBmb3IgaiBpbiAtNS4uNSB7CiAgICAgICAgICAgICAgICBsZXQgZW50aXR5ID0gYXNsaS5pbnN0YW50aWF0ZShjYWN0dXNfYWlkLCAmbXV0IGNtZHMpLnVud3JhcCgpLmFuZF9zZXQoCiAgICAgICAgICAgICAgICAgICAgVHJhbnNmb3JtMzo6ZnJvbV90cmFuc2xhdGlvbl94eXooaSBhcyBmMzIgKiAyLiwgaiBhcyBmMzIgKiAyLiwgMC4pLAogICAgICAgICAgICAgICAgKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgLy8gd29ybGQuc3Bhd24oR2x0Zk5vZGUgewogICAgICAgIC8vICAgICBwYXRoOiBQYXRoQnVmOjpmcm9tKCJJOi9Ja2FidXIvY2FuZHkvY3JhdGVzL2NhbmR5L2V4YW1wbGVzL3NwYWNlX29ya193aDQway5nbGIiKSwKICAgICAgICAvLyAgICAgc2NlbmU6IE5vbmUsCiAgICAgICAgLy8gICAgIG5vZGU6IE5vbmUsCiAgICAgICAgLy8gfSk7CgogICAgICAgIFNlbGYge30KICAgIH0KfQoAAAAAAAAAAPAJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAUAAAAAAACMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADwCQAAdXNlIGNhbmR5Ojp7QXNzZXRJbnN0YW5jZSwgQXNzZXRMaWJyYXJ5LCBBc3NldFVpZCwgQ2FtZXJhLCBDYW5keU1vY2NhLCBHbHRmQXNzZXREZXNjcmlwdG9yfTsKdXNlIGNhbmR5X3ByaW1zOjp7Q2FtZXJhTGluaywgSW1hZ2VMb2NhdGlvbiwgSW1hZ2VTaGFwZSwgV2luZG93RGVmLCBXaW5kb3dMYXlvdXR9Owp1c2UgZm91bmRhdGlvbjo6VGltZU1vY2NhOwp1c2UgZ2xhbTo6VmVjMzsKdXNlIHNjZW5lX3RyZWU6OlRyYW5zZm9ybTM7CnVzZSBzaW1wbGVjczo6cHJlbHVkZTo6KjsKdXNlIHN0ZDo6cGF0aDo6UGF0aEJ1ZjsKCmZuIG1haW4oKSAtPiBleXJlOjpSZXN1bHQ8KCk+IHsKICAgIGVudl9sb2dnZXI6OmluaXQoKTsKICAgIGxldCBtdXQgYXBwID0gY2FuZHk6OkFwcDo6bmV3KCk7CiAgICBhcHAubG9hZF9tb2NjYTo6PENhbmR5RXhhbXBsZUNhY3R1c01vY2NhPigpOwogICAgYXBwLnJ1bigpCn0KCnN0cnVjdCBDYW5keUV4YW1wbGVDYWN0dXNNb2NjYSB7fQoKaW1wbCBNb2NjYSBmb3IgQ2FuZHlFeGFtcGxlQ2FjdHVzTW9jY2EgewogICAgZm4gbG9hZChtdXQgZGVwczogTW9jY2FEZXBzKSB7CiAgICAgICAgZGVwcy5kZXBlbmRzX29uOjo8VGltZU1vY2NhPigpOwogICAgICAgIGRlcHMuZGVwZW5kc19vbjo6PENhbmR5TW9jY2E+KCk7CiAgICB9CgogICAgZm4gc3RhcnQod29ybGQ6ICZtdXQgV29ybGQpIC0+IFNlbGYgewogICAgICAgIGxldCBjYW0gPSB3b3JsZAogICAgICAgICAgICAuc3Bhd24oQ2FtZXJhOjpsb29rX2F0X3p1cCgKICAgICAgICAgICAgICAgIFZlYzM6Om5ldygxLjksIC00LjIsIDMuKSwKICAgICAgICAgICAgICAgIFZlYzM6Om5ldygwLiwgMC4sIDAuKSwKICAgICAgICAgICAgKSkKICAgICAgICAgICAgLmlkKCk7CgogICAgICAgIGxldCBfd2luID0gd29ybGQKICAgICAgICAgICAgLnNwYXduKCgKICAgICAgICAgICAgICAgIFdpbmRvd0RlZiB7CiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICJDYW5keTogQ2FjdHVzIi50b19zdHJpbmcoKSwKICAgICAgICAgICAgICAgICAgICBsYXlvdXQ6IFdpbmRvd0xheW91dCB7CiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlOiBJbWFnZVNoYXBlOjpmcm9tX3dpZHRoX2hlaWdodCgxOTIwLiwgMTA4MC4pLAogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogSW1hZ2VMb2NhdGlvbjo6ZnJvbV9ob3Jpem9udGFsX3ZlcnRpY2FsKDIwMC4sIDIwMC4pLAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgKENhbWVyYUxpbmssIGNhbSksCiAgICAgICAgICAgICkpCiAgICAgICAgICAgIC5pZCgpOwoKICAgICAgICBsZXQgYXNsaSA9IHdvcmxkLnNpbmdsZXRvbl9tdXQ6OjxBc3NldExpYnJhcnk+KCk7CgogICAgICAgIGxldCBjYWN0dXNfYWlkID0gQXNzZXRVaWQ6OmZyb21fc3RyKCJjYWN0dXMiKTsKICAgICAgICBhc2xpLmxvYWRfZ2x0ZigKICAgICAgICAgICAgJmNhY3R1c19haWQsCiAgICAgICAgICAgIEdsdGZBc3NldERlc2NyaXB0b3IgewogICAgICAgICAgICAgICAgcGF0aDogUGF0aEJ1Zjo6ZnJvbSgiSTovSWthYnVyL2NhbmR5L2NyYXRlcy9jYW5keS9leGFtcGxlcy9jYWN0dXMuZ2xiIiksCiAgICAgICAgICAgICAgICBzY2VuZTogTm9uZSwKICAgICAgICAgICAgICAgIG5vZGU6IE5vbmUsCiAgICAgICAgICAgIH0sCiAgICAgICAgKTsKCiAgICAgICAgLy8gbGV0IG9ya19haWQgPSBBc3NldFVpZDo6ZnJvbV9zdHIoInNwYWNlX29ya193aDQwayIpOwogICAgICAgIC8vIGFzbGkubG9hZF9nbHRmKAogICAgICAgIC8vICAgICAmb3JrX2FpZCwKICAgICAgICAvLyAgICAgR2x0ZkFzc2V0RGVzY3JpcHRvciB7CiAgICAgICAgLy8gICAgICAgICBwYXRoOiBQYXRoQnVmOjpmcm9tKCJJOi9Ja2FidXIvY2FuZHkvY3JhdGVzL2NhbmR5L2V4YW1wbGVzL3NwYWNlX29ya193aDQway5nbGIiKSwKICAgICAgICAvLyAgICAgICAgIHNjZW5lOiBOb25lLAogICAgICAgIC8vICAgICAgICAgbm9kZTogTm9uZSwKICAgICAgICAvLyAgICAgfSwKICAgICAgICAvLyApOwoKICAgICAgICBmb3IgaSBpbiAtNS4uNSB7CiAgICAgICAgICAgIGZvciBqIGluIC01Li41IHsKICAgICAgICAgICAgICAgIHdvcmxkLnNwYXduKCgKICAgICAgICAgICAgICAgICAgICBUcmFuc2Zvcm0zOjpmcm9tX3RyYW5zbGF0aW9uX3h5eihpIGFzIGYzMiAqIDIuLCBqIGFzIGYzMiAqIDIuLCAwLiksCiAgICAgICAgICAgICAgICAgICAgQXNzZXRJbnN0YW5jZShjYWN0dXNfYWlkLmNsb25lKCkpLAogICAgICAgICAgICAgICAgKSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIC8vIHdvcmxkLnNwYXduKEdsdGZOb2RlIHsKICAgICAgICAvLyAgICAgcGF0aDogUGF0aEJ1Zjo6ZnJvbSgiSTovSWthYnVyL2NhbmR5L2NyYXRlcy9jYW5keS9leGFtcGxlcy9zcGFjZV9vcmtfd2g0MGsuZ2xiIiksCiAgICAgICAgLy8gICAgIHNjZW5lOiBOb25lLAogICAgICAgIC8vICAgICBub2RlOiBOb25lLAogICAgICAgIC8vIH0pOwoKICAgICAgICBTZWxmIHt9CiAgICB9Cn0KAAAAAAAAAAASCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAUAAAAAAACMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAASCwAAdXNlIGNhbmR5Ojp7QXNzZXRJbnN0YW5jZSwgQXNzZXRMaWJyYXJ5LCBBc3NldFVpZCwgQ2FtZXJhLCBDYW5keU1vY2NhLCBHbHRmQXNzZXREZXNjcmlwdG9yfTsKdXNlIGNhbmR5X3ByaW1zOjp7Q2FtZXJhTGluaywgSW1hZ2VMb2NhdGlvbiwgSW1hZ2VTaGFwZSwgV2luZG93RGVmLCBXaW5kb3dMYXlvdXR9Owp1c2UgZm91bmRhdGlvbjo6VGltZU1vY2NhOwp1c2UgZ2xhbTo6VmVjMzsKdXNlIHNjZW5lX3RyZWU6OlRyYW5zZm9ybTM7CnVzZSBzaW1wbGVjczo6cHJlbHVkZTo6KjsKdXNlIHN0ZDo6cGF0aDo6UGF0aEJ1ZjsKCmZuIG1haW4oKSAtPiBleXJlOjpSZXN1bHQ8KCk+IHsKICAgIGVudl9sb2dnZXI6OmluaXQoKTsKICAgIGxldCBtdXQgYXBwID0gY2FuZHk6OkFwcDo6bmV3KCk7CiAgICBhcHAubG9hZF9tb2NjYTo6PENhbmR5RXhhbXBsZUNhY3R1c01vY2NhPigpOwogICAgYXBwLnJ1bigpCn0KCnN0cnVjdCBDYW5keUV4YW1wbGVDYWN0dXNNb2NjYSB7fQoKaW1wbCBNb2NjYSBmb3IgQ2FuZHlFeGFtcGxlQ2FjdHVzTW9jY2EgewogICAgZm4gbG9hZChtdXQgZGVwczogTW9jY2FEZXBzKSB7CiAgICAgICAgZGVwcy5kZXBlbmRzX29uOjo8VGltZU1vY2NhPigpOwogICAgICAgIGRlcHMuZGVwZW5kc19vbjo6PENhbmR5TW9jY2E+KCk7CiAgICB9CgogICAgZm4gc3RhcnQod29ybGQ6ICZtdXQgV29ybGQpIC0+IFNlbGYgewogICAgICAgIGxldCBjYW0gPSB3b3JsZAogICAgICAgICAgICAuc3Bhd24oQ2FtZXJhOjpsb29rX2F0X3p1cCgKICAgICAgICAgICAgICAgIDUuICogVmVjMzo6bmV3KDEuOSwgLTQuMiwgMi4pLAogICAgICAgICAgICAgICAgVmVjMzo6bmV3KDAuLCAwLiwgMC4pLAogICAgICAgICAgICApKQogICAgICAgICAgICAuaWQoKTsKCiAgICAgICAgbGV0IF93aW4gPSB3b3JsZAogICAgICAgICAgICAuc3Bhd24oKAogICAgICAgICAgICAgICAgV2luZG93RGVmIHsKICAgICAgICAgICAgICAgICAgICB0aXRsZTogIkNhbmR5OiBDYWN0dXMiLnRvX3N0cmluZygpLAogICAgICAgICAgICAgICAgICAgIGxheW91dDogV2luZG93TGF5b3V0IHsKICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGU6IEltYWdlU2hhcGU6OmZyb21fd2lkdGhfaGVpZ2h0KDE5MjAuLCAxMDgwLiksCiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBJbWFnZUxvY2F0aW9uOjpmcm9tX2hvcml6b250YWxfdmVydGljYWwoMjAwLiwgMjAwLiksCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAoQ2FtZXJhTGluaywgY2FtKSwKICAgICAgICAgICAgKSkKICAgICAgICAgICAgLmlkKCk7CgogICAgICAgIGxldCBhc2xpID0gd29ybGQuc2luZ2xldG9uX211dDo6PEFzc2V0TGlicmFyeT4oKTsKCiAgICAgICAgbGV0IGNhY3R1c19haWQgPSBBc3NldFVpZDo6ZnJvbV9zdHIoImNhY3R1cyIpOwogICAgICAgIGFzbGkubG9hZF9nbHRmKAogICAgICAgICAgICAmY2FjdHVzX2FpZCwKICAgICAgICAgICAgR2x0ZkFzc2V0RGVzY3JpcHRvciB7CiAgICAgICAgICAgICAgICBwYXRoOiBQYXRoQnVmOjpmcm9tKCJJOi9Ja2FidXIvY2FuZHkvY3JhdGVzL2NhbmR5L2V4YW1wbGVzL2NhY3R1cy5nbGIiKSwKICAgICAgICAgICAgICAgIHNjZW5lOiBOb25lLAogICAgICAgICAgICAgICAgbm9kZTogTm9uZSwKICAgICAgICAgICAgfSwKICAgICAgICApOwoKICAgICAgICBsZXQgb3JrX2FpZCA9IEFzc2V0VWlkOjpmcm9tX3N0cigic3BhY2Vfb3JrX3doNDBrIik7CiAgICAgICAgYXNsaS5sb2FkX2dsdGYoCiAgICAgICAgICAgICZvcmtfYWlkLAogICAgICAgICAgICBHbHRmQXNzZXREZXNjcmlwdG9yIHsKICAgICAgICAgICAgICAgIHBhdGg6IFBhdGhCdWY6OmZyb20oIkk6L0lrYWJ1ci9jYW5keS9jcmF0ZXMvY2FuZHkvZXhhbXBsZXMvc3BhY2Vfb3JrX3doNDBrLmdsYiIpLAogICAgICAgICAgICAgICAgc2NlbmU6IE5vbmUsCiAgICAgICAgICAgICAgICBub2RlOiBOb25lLAogICAgICAgICAgICB9LAogICAgICAgICk7CgogICAgICAgIHdvcmxkLnNwYXduKCgKICAgICAgICAgICAgVHJhbnNmb3JtMzo6ZnJvbV90cmFuc2xhdGlvbl94eXooMC4sIDAuLCAwLikud2l0aF9zY2FsZSgwLjAxICogVmVjMzo6T05FKSwKICAgICAgICAgICAgQXNzZXRJbnN0YW5jZShvcmtfYWlkLmNsb25lKCkpLAogICAgICAgICkpOwoKICAgICAgICAvLyBjb25zdCBIQUxGX0NPVU5UOiBpMzIgPSAxOwogICAgICAgIC8vIGNvbnN0IFNQQUNJTkc6IGYzMiA9IDMuOwogICAgICAgIC8vIGZvciBpIGluIC1IQUxGX0NPVU5ULi49SEFMRl9DT1VOVCB7CiAgICAgICAgLy8gICAgIGZvciBqIGluIC1IQUxGX0NPVU5ULi49SEFMRl9DT1VOVCB7CiAgICAgICAgLy8gICAgICAgICB3b3JsZC5zcGF3bigoCiAgICAgICAgLy8gICAgICAgICAgICAgVHJhbnNmb3JtMzo6ZnJvbV90cmFuc2xhdGlvbl94eXooaSBhcyBmMzIgKiBTUEFDSU5HLCBqIGFzIGYzMiAqIFNQQUNJTkcsIDAuKSwKICAgICAgICAvLyAgICAgICAgICAgICBBc3NldEluc3RhbmNlKGNhY3R1c19haWQuY2xvbmUoKSksCiAgICAgICAgLy8gICAgICAgICApKTsKICAgICAgICAvLyAgICAgfQogICAgICAgIC8vIH0KCiAgICAgICAgLy8gd29ybGQuc3Bhd24oR2x0Zk5vZGUgewogICAgICAgIC8vICAgICBwYXRoOiBQYXRoQnVmOjpmcm9tKCJJOi9Ja2FidXIvY2FuZHkvY3JhdGVzL2NhbmR5L2V4YW1wbGVzL3NwYWNlX29ya193aDQway5nbGIiKSwKICAgICAgICAvLyAgICAgc2NlbmU6IE5vbmUsCiAgICAgICAgLy8gICAgIG5vZGU6IE5vbmUsCiAgICAgICAgLy8gfSk7CgogICAgICAgIFNlbGYge30KICAgIH0KfQoAAAAAAAAAAO0KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAUAAAAAAACMBQAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"paste",
					null,
					"AQAAAB0GAAAAAAAAPwYAAAAAAAAlAAAASTovSWthYnVyL2NhbmR5L2NyYXRlcy9jYW5keS9leGFtcGxlcw",
					"AQAAAAAAAAABAAAAHQYAAAAAAABCBgAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"left_delete",
					null,
					"AQAAAD4GAAAAAAAAPgYAAAAAAAABAAAAXA",
					"AQAAAAAAAAABAAAAPwYAAAAAAAA/BgAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "/"
					},
					"BQAAADgGAAAAAAAAOQYAAAAAAAABAAAAXDEGAAAAAAAAMgYAAAAAAAABAAAAXCoGAAAAAAAAKwYAAAAAAAABAAAAXCYGAAAAAAAAJwYAAAAAAAABAAAAXB8GAAAAAAAAIAYAAAAAAAABAAAAXA",
					"AQAAAAAAAAAFAAAAIAYAAAAAAAAfBgAAAAAAAAAAAAAAAPC/JgYAAAAAAAAnBgAAAAAAAAAAAAAAAPC/KgYAAAAAAAArBgAAAAAAAAAAAAAAAPC/MQYAAAAAAAAyBgAAAAAAAAAAAAAAAPC/OAYAAAAAAAA5BgAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					""
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Automatic"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Run"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Run (with args)..."
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Check"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Test"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Test (with args)..."
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Bench"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Clean"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Document"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Clippy"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Script"
				]
			],
			[
				"Packages/Rust Enhanced/RustEnhanced.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Rust/Rust.sublime-build",
					""
				],
				[
					"Packages/Rust/Rust.sublime-build",
					"Run"
				],
				[
					"Packages/Rust/Rust.sublime-build",
					"Build & Run"
				]
			],
			[
				"Packages/Rust/Rust.sublime-build",
				"Run"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"snake",
				"Convert Case: snake_case"
			],
			[
				"lower",
				"Convert Case: lowerCamelCase"
			],
			[
				"package",
				"Package Control: List Packages"
			],
			[
				"upp",
				"Convert Case: Upper Case"
			],
			[
				"cam",
				"Convert Case: UpperCamelCase"
			],
			[
				"trail",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"sna",
				"Convert Case: snake_case"
			],
			[
				"loc",
				"Convert Case: Lower Case"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"Package Control: remo",
				"Package Control: Remove Package"
			],
			[
				"Package Control: list",
				"Package Control: List Packages"
			],
			[
				"upper",
				"Convert Case: Upper Case"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"package lis",
				"Package Control: List Packages"
			],
			[
				"list pac",
				"Package Control: List Packages"
			],
			[
				"mark",
				"OmniMarkupPreviewer: Preview Current Markup in Browser"
			],
			[
				"install package",
				"Package Control: Install Package"
			],
			[
				"theme",
				"UI: Select Theme"
			],
			[
				"pack inst",
				"Package Control: Install Package"
			],
			[
				"rust",
				"RustFmt: Format Buffer"
			],
			[
				"pack remo",
				"Package Control: Remove Package"
			],
			[
				"rustf",
				"RustFormat: Enable Format on Save"
			],
			[
				"packinst",
				"Package Control: Install Package"
			],
			[
				"rustfmt",
				"RustFmt: Format Buffer"
			],
			[
				"resource",
				"PackageResourceViewer: Open Resource"
			],
			[
				"resour",
				"PackageResourceViewer: Extract Package"
			],
			[
				"package resour",
				"PackageResourceViewer: Open Resource"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"tra",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"python",
				"Set Syntax: Python"
			],
			[
				"trai",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"run",
				"Build With: RustEnhanced - Run"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"terminus open",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"terminuopen",
				"Terminus: Open Default Shell in Panel"
			],
			[
				"package ins",
				"Package Control: Install Package"
			],
			[
				"tril",
				"Trim Trailing White Space"
			],
			[
				"tri",
				"Trim Trailing White Space"
			],
			[
				"lower c",
				"Convert Case: Lower Case"
			],
			[
				"tr",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"alignm",
				"Preferences: Alignment Key Bindings – Default"
			],
			[
				"align",
				"Preferences: Alignment Key Bindings – Default"
			],
			[
				"buil",
				"Build With: Python"
			],
			[
				"build",
				"Build With: Python"
			],
			[
				"test",
				"Build With: RustEnhanced - Test"
			],
			[
				"terminu",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"upper ca",
				"Convert Case: Upper Case"
			],
			[
				"terminus",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"termin open",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"pack",
				"Preferences: Browse Packages"
			],
			[
				"run test",
				"Build With: RustEnhanced - Test"
			],
			[
				"install pack",
				"Package Control: Install Package"
			],
			[
				"pack ins",
				"Package Control: Install Package"
			],
			[
				"rust build",
				"Build With: RustEnhanced"
			],
			[
				"rust run",
				"Build With: RustEnhanced - Run"
			],
			[
				"spac",
				"Indentation: Convert to Spaces"
			],
			[
				"space",
				"Indentation: Convert to Spaces"
			],
			[
				"white",
				"Trim Trailing White Space"
			],
			[
				"doxygen sett",
				"Preferences: DoxyDoxygen Settings"
			],
			[
				"trailing",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"dox",
				"Preferences: DoxyDoxygen Settings"
			],
			[
				"doxy",
				"Preferences: DoxyDoxygen Settings"
			],
			[
				"spa",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"trailin",
				"Trailing Spaces: Delete Trailing Spaces"
			],
			[
				"to space",
				"Indentation: Convert to Spaces"
			],
			[
				"termin",
				"Terminus: List Shells"
			],
			[
				"open",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"termin uti",
				"Terminus Utilities: Select Theme"
			],
			[
				"termin oepn",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"temrin ope",
				"Terminus: Open Default Shell in Tab (View)"
			],
			[
				"temrin",
				"Terminal: Open"
			],
			[
				"spaces",
				"Indentation: Convert to Spaces"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 391.0,
		"history":
		[
			"ls",
			"dir",
			"ls"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/I/Ikabur/eph",
		"/I/Ikabur/eph/crates",
		"/I/Ikabur/eph/crates/combat",
		"/I/Ikabur/eph/crates/combat/src",
		"/I/Ikabur/eph/crates/eph",
		"/I/Ikabur/eph/crates/eph/src",
		"/I/Ikabur/eph/crates/flowsim",
		"/I/Ikabur/eph/crates/flowsim/tests",
		"/I/Ikabur/eph/crates/gosim",
		"/I/Ikabur/eph/crates/gosim/src",
		"/I/Ikabur/candy",
		"/I/Ikabur/candy/crates",
		"/I/Ikabur/candy/crates/candy",
		"/I/Ikabur/candy/crates/candy/examples",
		"/I/Ikabur/candy/crates/candy/shaders",
		"/I/Ikabur/candy/crates/candy/src",
		"/I/Ikabur/candy/crates/candy/src/buf",
		"/I/Ikabur/candy/crates/candy/src/mesh",
		"/I/Ikabur/candy/crates/candy/src/renderer",
		"/I/Ikabur/candy/crates/candy/src/stream",
		"/I/Ikabur/candy/crates/scene_tree",
		"/I/Ikabur/candy/crates/scene_tree/src",
		"/I/Ikabur/atom",
		"/I/Ikabur/atom/crates",
		"/I/Ikabur/atom/crates/excess",
		"/I/Ikabur/atom/crates/excess/src",
		"/I/Ikabur/atom/crates/excess/src/traits",
		"/I/Ikabur/magi",
		"/I/Ikabur/magi/crates",
		"/I/Ikabur/magi/crates/magi_color",
		"/I/Ikabur/magi/crates/magi_gems",
		"/I/Ikabur/magi/crates/magi_gems/src",
		"/I/Ikabur/magi/crates/magi_geo",
		"/I/Ikabur/magi/crates/magi_geo/src",
		"/I/Ikabur/magi/crates/magi_rng",
		"/I/Ikabur/magi/crates/magi_rng/src",
		"/I/Ikabur/magi/crates/magi_sdf",
		"/I/Ikabur/magi/crates/magi_sdf/src",
		"/I/Ikabur/magi/crates/magi_se",
		"/I/Ikabur/magi/crates/magi_se/src"
	],
	"file_history":
	[
		"/I/Ikabur/candy/Cargo.toml",
		"/I/Ikabur/candy/crates/candy/src/bind_group.rs",
		"/I/Ikabur/candy/crates/candy/src/gather_frame_mocca.rs",
		"/I/Ikabur/candy/crates/candy/src/glassworks.rs",
		"/I/Ikabur/candy/crates/candy/src/renderer.rs",
		"/I/Ikabur/candy/crates/candy/src/transform.rs",
		"/I/Ikabur/candy/crates/candy/src/vertex_source_to_buffer.rs",
		"/I/Ikabur/magi/crates/magi_geo/src/lib.rs",
		"/I/Ikabur/candy/crates/candy/examples/orks.candy",
		"/I/Ikabur/candy/crates/candy/src/buf/accessor.rs",
		"/I/Ikabur/candy/crates/candy/src/mesh/standard_mesh.rs",
		"/I/Ikabur/candy/crates/candy/src/lib.rs",
		"/I/Ikabur/candy/crates/candy/src/app.rs",
		"/I/Ikabur/candy/crates/candy/src/asset_library.rs",
		"/I/Ikabur/candy/crates/candy/src/asset_mocca.rs",
		"/I/Ikabur/candy/crates/candy/examples/ork.rs",
		"/I/Ikabur/candy/crates/candy/src/bbb.rs",
		"/I/Ikabur/eph/Cargo.toml",
		"/I/Ikabur/candy/crates/fim/src/lib.rs",
		"/I/Ikabur/candy/crates/candy/src/vertex_buffer_pool.rs",
		"/I/Ikabur/magi/crates/magi_geo/src/segment.rs",
		"/I/Ikabur/magi/Cargo.toml",
		"/I/Ikabur/magi/crates/magi_rng/Cargo.toml",
		"/I/Ikabur/candy/crates/candy/Cargo.toml",
		"/I/Ikabur/candy/crates/fim/Cargo.toml",
		"/I/Ikabur/atom/crates/excess/src/entity_world_mut.rs",
		"/I/Ikabur/magi/crates/magi_rng/src/lib.rs",
		"/I/Ikabur/candy/crates/scene_tree/src/transform.rs",
		"/I/Ikabur/magi/crates/magi_gems/src/lib.rs",
		"/I/Ikabur/ikabur/ikabur/forge/gems/fim/fim.cpp",
		"/I/Ikabur/candy/crates/gizmos/src/lib.rs",
		"/I/Ikabur/candy/crates/candy/src/wgpu_res.rs",
		"/I/Ikabur/candy/crates/candy/examples/cube.rs",
		"/I/Ikabur/magi/crates/magi_se/src/so3.rs",
		"/I/Ikabur/magi/crates/magi_se/src/ortho_normal_basis.rs",
		"/I/Ikabur/atom/crates/excess/src/traits/query_fetch.rs",
		"/I/Ikabur/magi/crates/magi_se/src/so2.rs",
		"/I/Ikabur/magi/crates/magi_se/src/math.rs",
		"/I/Ikabur/magi/crates/magi_se/src/lib.rs",
		"/I/Ikabur/magi/crates/magi_gems/Cargo.toml",
		"/I/Ikabur/atom/crates/excess/src/world.rs",
		"/I/Ikabur/atom/crates/excess/src/commands.rs",
		"/I/Ikabur/candy/crates/candy/src/gpu_buffer.rs",
		"/I/Ikabur/atom/crates/mocca/src/runner.rs",
		"/I/Ikabur/candy/crates/candy/src/frame.rs",
		"/I/Ikabur/atom/crates/simplecs/src/fabric.rs",
		"/I/Ikabur/candy/crates/candy/src/camera.rs",
		"/I/Ikabur/magi/crates/magi_geo/src/tri_mesh.rs",
		"/I/Ikabur/magi/crates/magi_geo/src/ball.rs",
		"/I/Ikabur/magi/crates/magi_geo/src/distance_transform.rs",
		"/I/Ikabur/magi/crates/magi_geo/src/aabb.rs",
		"/I/Ikabur/magi/crates/magi_sdf/Cargo.toml",
		"/I/Ikabur/magi/crates/magi_geo/src/posed.rs",
		"/I/Ikabur/magi/crates/magi_geo/src/quad_mesh.rs",
		"/I/Ikabur/magi/crates/magi_geo/src/to_mesh.rs",
		"/I/Ikabur/magi/crates/magi_geo/src/tube.rs",
		"/I/Ikabur/magi/crates/magi_geo/Cargo.toml",
		"/I/Ikabur/magi/rustfmt.toml",
		"/I/hand/fibs/crates/kernel/src/lib.rs",
		"/I/Ikabur/magi/crates/magi_se/src/se2.rs",
		"/I/Ikabur/atom/crates/excess/src/traits/query_fetch_term.rs",
		"/I/Ikabur/magi/crates/magi_rng/.gitignore",
		"/I/Ikabur/magi/crates/magi_se/Cargo.toml",
		"/I/Ikabur/candy/crates/candy/src/window.rs",
		"/I/Ikabur/candy/crates/candy/src/candy_mocca.rs",
		"/I/Ikabur/atom/crates/excess/src/query.rs",
		"/I/Ikabur/eph/crates/eph/src/eph_mocca.rs",
		"/I/Ikabur/eph/crates/eph/src/main.rs",
		"/I/Ikabur/ikabur/ikabur/forge/apps/voxels.yaml",
		"/I/Ikabur/ikabur/ikabur/forge/data/gui.aix",
		"/I/Ikabur/ikabur/ikabur/forge/data/terrain.aix",
		"/I/Ikabur/ikabur/ikabur/forge/data/types.cpp",
		"/I/Ikabur/ikabur/ikabur/forge/data/venus_aux.h",
		"/I/Ikabur/ikabur/ikabur/forge/data/types.h",
		"/I/Ikabur/khorne/kernels/src/baldurs_gate.rs",
		"/I/Ikabur/galette/flatsim/src/view.rs",
		"/I/Ikabur/atom/crates/excess/src/detail/unsafe_entity_cell.rs",
		"/I/Ikabur/candy/crates/candy/src/highway.rs",
		"/I/Ikabur/candy/crates/candy/src/window_entity_map.rs",
		"/I/Ikabur/candy/crates/candy/src/backend.rs",
		"/I/Ikabur/atom/crates/mocca/src/lib.rs",
		"/I/Ikabur/candy/crates/candy/src/candy_gather_mocca.rs",
		"/I/Ikabur/eph/crates/eph/Cargo.toml",
		"/I/Ikabur/candy/crates/candy/src/window_renderer_resources.rs",
		"/I/Ikabur/candy/crates/foundation/src/lib.rs",
		"/I/Ikabur/eph/crates/gosim/Cargo.toml",
		"/I/Ikabur/candy/crates/foundation/src/log.rs",
		"/I/Ikabur/candy/crates/foundation/src/time.rs",
		"/I/Ikabur/eph/crates/gosim/src/body_part.rs",
		"/I/Ikabur/eph/crates/gosim/src/flow_sim.rs",
		"/I/Ikabur/eph/crates/gosim/src/heart.rs",
		"/I/Ikabur/eph/crates/gosim/src/lungs.rs",
		"/I/Ikabur/atom/crates/excess/src/traits/entity_access_component_helper.rs",
		"/I/Ikabur/eph/crates/gosim/src/blood.rs",
		"/I/Ikabur/candy/crates/candy/src/clock.rs",
		"/I/Ikabur/candy/crates/candy/src/engine.rs",
		"/I/Ikabur/candy/crates/foundation/Cargo.toml",
		"/I/Ikabur/eph/crates/gosim/src/lib.rs",
		"/I/Ikabur/eph/crates/gosim/src/time.rs",
		"/I/Ikabur/eph/justfile",
		"/I/Ikabur/eph/crates/flowsim/tests/test_pipe_chain.rs",
		"/I/Ikabur/eph/crates/gossim_apps/examples/gosim_test1.rs",
		"/I/Ikabur/eph/.git/config",
		"/I/Ikabur/eph/crates/gossim_apps/examples/flow_sim_pipe_chain.rss",
		"/I/Ikabur/eph/crates/flowsim/src/pipe.rs",
		"/I/Ikabur/eph/crates/gosim/src/gos_sim.rs",
		"/I/Ikabur/eph/crates/mocca/src/runner.rs",
		"/I/Ikabur/gos/flecs_crash/Cargo.toml",
		"/I/Ikabur/gos/crates/gosim/src/agent.rs",
		"/I/Ikabur/gos/crates/gosrv/src/main.rs",
		"/I/Ikabur/gos/crates/gosrv/src/game_server.rs",
		"/I/Ikabur/gos/crates/gosim/src/lib.rs",
		"/I/Ikabur/gos/crates/gosim/src/utils/stats.rs",
		"/I/Ikabur/gos/crates/gosim/src/utils/flecs_query_relation_helpers.rs",
		"/I/Ikabur/gos/crates/gems/Cargo.toml",
		"/I/Ikabur/gos/crates/gosim/src/waterfront.rs",
		"/I/Ikabur/gos/crates/goscl/src/view/inventory_view.rs",
		"/I/Ikabur/gos/crates/gosim/src/utils/newtype_decimal_component.rs",
		"/I/Ikabur/gos/crates/gosim/src/breathing.rs",
		"/I/Ikabur/gos/crates/gems/src/dec.rs",
		"/I/Ikabur/gos/crates/gems/src/modifier.rs",
		"/C/Users/dtw/Downloads/flecs (1).c",
		"/I/Ikabur/gos/crates/gosim/examples/gosim_test1.rs",
		"/I/Ikabur/gos/crates/gosim/src/blood.rs",
		"/I/Ikabur/gos/flecs_crash/src/module_phantom.rs",
		"/I/Ikabur/gos/flecs_crash/src/main.rs",
		"/I/Ikabur/gos/flecs_crash/src/prefab_tree.rs",
		"/I/Ikabur/gos/crates/gems/src/fair_alloc.rs"
	],
	"find":
	{
		"height": 41.0
	},
	"find_in_files":
	{
		"height": 187.0,
		"where_history":
		[
			"*.rs",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"\\",
			"BindGroupBuilder",
			"buf",
			"mesh",
			"gosim",
			"= {",
			"geo",
			"magi_se",
			"color",
			"FimItem",
			"mz",
			"basis",
			"so2",
			"local_vec2",
			"new_from_seed",
			"MyRng",
			"new_from_seed",
			"magi_se",
			"local_vec2",
			"normal_f32",
			"MyRng",
			"query_fetch_term_impl_var",
			"timestep",
			"UnsafeEntityCell",
			"MyWindow",
			"FrameQueue",
			"sim",
			"tx_sender",
			"backend",
			"candy_gather_mocca",
			"CandyGatherMocca",
			"new",
			"cgw",
			"CandyApp",
			"Backend",
			"backend",
			"Runtime",
			"upload_vertex_buffers",
			"Output",
			"SharedFrame",
			"Send",
			"upload_vertex_buffers",
			"tmp",
			"empty",
			"queues",
			"RenderItem",
			"PassQueues",
			"queues",
			"PassQueues",
			"render_queue",
			"RenderItem",
			"RenderQueue",
			"PassQueues",
			"win_def",
			"find",
			"WgpuRes",
			"WindowRendererResources",
			"WindowIdEntityMap",
			"query_vbuf",
			"renderer.",
			"OnCreate",
			"BufferCommand",
			"UploadBuffer",
			"CameraBuffer",
			"CandyEnqueueMocca",
			"candy_enqueue_mocca",
			"wire_material",
			"CandyRendererMocca",
			"scene_tree",
			"candy",
			"RuntimeApp",
			"backend",
			"TransformBufferIndex",
			"renderer_update",
			"pub",
			"backend.borrow_mut()",
			"Rc<RefCell<",
			"self.world\n            .borrow_mut()",
			"world",
			"64",
			"candy",
			"GosSimDebugMocca",
			"goscl",
			"module_phantom",
			"flecs_module_phantom",
			"self",
			"output",
			"intake",
			"/* ",
			"target",
			"red",
			"entity_named",
			"create_blood_vessel",
			"entity_from_id",
			"HeartPrefabParts",
			"pub",
			"EntityView",
			"<'a>",
			"slot_of",
			"Entity",
			",",
			"red",
			"Red",
			"rust_decimal::dec",
			"dec",
			"Decimal",
			"ModifierKind",
			"StatMods<T>",
			"<T>",
			"T",
			"$name",
			"DummModule",
			"HeartRateBpm",
			"add",
			"Clone",
			"Base",
			"HeartRateBpm",
			"f32",
			"gems::Decimal",
			"$name",
			"HeartRateBpm",
			"Weight",
			"world",
			"*cre",
			"connect_entities",
			"connect_by_id",
			"entity_from_id",
			"a"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": true,
		"wrap": true
	},
	"folders":
	[
		{
			"path": "I:\\Ikabur\\eph"
		},
		{
			"path": "I:\\Ikabur\\candy"
		},
		{
			"path": "I:\\Ikabur\\atom"
		},
		{
			"path": "I:\\Ikabur\\magi"
		}
	],
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/I/Ikabur/candy/crates/candy/src/renderer/bind_group.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3428,
						"regions":
						{
						},
						"selection":
						[
							[
								3428,
								3428
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust Enhanced/RustEnhanced.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1689.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/I/Ikabur/atom/crates/excess/src/world.rs",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7322,
						"regions":
						{
						},
						"selection":
						[
							[
								5533,
								5533
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust Enhanced/RustEnhanced.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2900.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 2,
					"file": "/I/Ikabur/atom/crates/excess/src/commands.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8803,
						"regions":
						{
						},
						"selection":
						[
							[
								956,
								956
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust Enhanced/RustEnhanced.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 70.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/I/Ikabur/candy/crates/scene_tree/src/scene_tree_mocca.rs",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7760,
						"regions":
						{
						},
						"selection":
						[
							[
								6900,
								6900
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust Enhanced/RustEnhanced.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4621.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/I/Ikabur/candy/crates/candy/src/renderer/renderer.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16008,
						"regions":
						{
						},
						"selection":
						[
							[
								1042,
								1042
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust Enhanced/RustEnhanced.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 590.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/I/Ikabur/candy/crates/candy/src/asset_library.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14159,
						"regions":
						{
						},
						"selection":
						[
							[
								3577,
								3580
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust Enhanced/RustEnhanced.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1286.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 6,
					"file": "/I/Ikabur/candy/crates/candy/examples/cactus.rs",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2793,
						"regions":
						{
						},
						"selection":
						[
							[
								1568,
								1568
							],
							[
								1575,
								1575
							],
							[
								1579,
								1579
							],
							[
								1586,
								1586
							],
							[
								1593,
								1593
							]
						],
						"settings":
						{
							"syntax": "Packages/Rust Enhanced/RustEnhanced.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 62.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			],
			[
				2,
				0,
				3,
				1
			]
		],
		"cols":
		[
			0.0,
			0.33,
			0.65654278306,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.Terminus":
	{
		"height": 371.0
	},
	"output.Terminus 2":
	{
		"height": 126.0
	},
	"output.exec":
	{
		"height": 171.0
	},
	"output.find_results":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"output.unsaved_changes":
	{
		"height": 126.0,
		"history":
		[
		]
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "",
	"replace":
	{
		"height": 54.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ensembl",
				"crates\\ens\\src\\ensemble.rs"
			],
			[
				"trime",
				"crates\\geo\\src\\tri_mesh.rs"
			],
			[
				"trimesh",
				"crates\\geo\\src\\tri_mesh.rs"
			],
			[
				"pers",
				"crates\\ens\\src\\persistence.rs"
			],
			[
				"rop",
				"crates\\fibs\\examples\\rope.rs"
			],
			[
				"driver",
				"crates\\nopt\\src\\driver.rs"
			],
			[
				"chain",
				"crates\\magi\\src\\chain.rs"
			],
			[
				"fabricoptjob",
				"crates\\fibs\\src\\fabric_opt_job.rs"
			],
			[
				"fabric opt job",
				"crates\\forge\\src\\model\\fabric_opt_job.rs"
			],
			[
				"rope",
				"crates\\fibs\\examples\\rope.rs"
			],
			[
				"rope.rs",
				"crates\\fibs\\examples\\rope.rs"
			],
			[
				"dynv",
				"crates\\magi_vec\\src\\dyn_vec.rs"
			],
			[
				"vec_n.rs",
				"crates\\geo\\src\\vec_n.rs"
			],
			[
				"plane.rs",
				"crates\\geo\\src\\plane.rs"
			],
			[
				"gui.r",
				"crates\\forge\\src\\controller\\gui.rs"
			],
			[
				"ens",
				"crates\\ens\\src\\ensemble.rs"
			],
			[
				"user_",
				"crates\\forge\\src\\model\\user_settings.rs"
			],
			[
				"camera",
				"crates\\forge\\src\\components\\camera.rs"
			],
			[
				"tri_me",
				"crates\\geo\\src\\tri_mesh.rs"
			],
			[
				"trim",
				"crates\\geo\\src\\tri_mesh.rs"
			],
			[
				"volum",
				"crates\\geo\\src\\volume.rs"
			],
			[
				"rng.rs",
				"gems\\src\\rng.rs"
			],
			[
				"rng",
				"gems\\src\\rng.rs"
			],
			[
				"render.rs",
				"candy_wgpu\\src\\renderer.rs"
			],
			[
				"renderer",
				"candy_wgpu\\src\\renderer.rs"
			],
			[
				"framework",
				"candy_wgpu\\src\\framework.rs"
			],
			[
				"render",
				"ephr_core\\src\\game\\renderer.rs"
			],
			[
				"rng.r",
				"gems\\src\\rng.rs"
			],
			[
				"grid",
				"gems\\src\\grid.rs"
			],
			[
				"gaia.rs",
				"gaia\\src\\bin\\gaia.rs"
			],
			[
				"gaia lib.rs",
				"gaia\\src\\lib.rs"
			],
			[
				"just",
				"justfile"
			],
			[
				"atom_mol.rs",
				"atom_mol\\src\\lib.rs"
			],
			[
				"atom singl",
				"atom\\src\\singleton.rs"
			],
			[
				"enumera",
				"gems\\src\\enumerable.rs"
			],
			[
				"world_setting",
				"warmind\\src\\modes\\campaign\\world_settings.rs"
			],
			[
				"enum_vec",
				"gems\\src\\enum_vec.rs"
			],
			[
				"terrain_settin",
				"warmind\\assets\\map\\terrain_settings.ron"
			],
			[
				"combat repor",
				"warmind\\src\\combat\\report.rs"
			],
			[
				"fuzzy",
				"gems\\src\\fuzzy.rs"
			],
			[
				"dog.ron",
				"warmind\\assets\\dog.ron"
			],
			[
				"perlin",
				"gesso\\src\\simplex_perlin_noise.rs"
			],
			[
				"tags.rs",
				"warmind\\src\\codex\\tags.rs"
			],
			[
				"tags.ron",
				"warmind\\assets\\sprites\\tags.ron"
			],
			[
				"campaign ren",
				"warmind\\src\\modes\\campaign\\campaign_renderer.rs"
			],
			[
				"dog",
				"gems\\src\\dog.rs"
			],
			[
				"tags.",
				"warmind\\src\\codex\\tags.rs"
			],
			[
				"path_trade",
				"warmind\\src\\humania\\ops\\path_trade_value_op.rs"
			],
			[
				"camino astar.r",
				"camino\\src\\astar.rs"
			],
			[
				"camino mod.rs",
				"warmind\\src\\modes\\campaign\\mod.rs"
			],
			[
				"default_pip",
				"candy_wgpu_pipelines\\src\\default_pipeline\\mod.rs"
			],
			[
				"gizmo",
				"warmind\\src\\modes\\gizmo.rs"
			],
			[
				"terrain hei rend",
				"warmind\\src\\modes\\campaign\\terrain_heighfield_renderling.rs"
			],
			[
				"blup",
				"warmind\\src\\modes\\blueprint_mol.rs"
			],
			[
				"texturesou",
				"candy_wgpu_pipelines\\src\\default_pipeline\\texture_resources.rs"
			],
			[
				"texture_resour",
				"candy_wgpu_pipelines\\src\\common\\texture_resource.rs"
			],
			[
				"bluep",
				"warmind\\src\\modes\\blueprint_mol.rs"
			],
			[
				"gems rng",
				"gems\\src\\rng.rs"
			],
			[
				"blueprint",
				"warmind\\src\\modes\\blueprint_mol.rs"
			],
			[
				"instan",
				"candy_wgpu_pipelines\\src\\common\\instance_buffer.rs"
			],
			[
				"legacy_",
				"candy_mol\\src\\legacy_onion_soup.rs"
			],
			[
				"pixie2.rs",
				"pixie2\\src\\lib.rs"
			],
			[
				"scene_tree transform.rs",
				"scene_tree\\src\\transform.rs"
			],
			[
				"blueprin",
				"warmind\\src\\modes\\blueprint_mol.rs"
			],
			[
				"decals_pip",
				"candy_wgpu_pipelines\\src\\decal_pipeline\\decals_pipeline.rs"
			],
			[
				"scene_tree mol.rs",
				"scene_tree\\src\\mol.rs"
			],
			[
				"blue",
				"warmind\\src\\modes\\blueprint_mol.rs"
			],
			[
				"gems math.rs",
				"gems\\src\\math.rs"
			],
			[
				"candy_mol.rs",
				"candy_mol\\src\\mol.rs"
			],
			[
				"legaci",
				"candy_mol\\src\\legacy_onion_soup.rs"
			],
			[
				"command",
				"atom\\src\\commands.rs"
			],
			[
				"legacy ",
				"candy_mol\\src\\legacy_onion_soup.rs"
			],
			[
				"terrain_hei",
				"warmind\\src\\modes\\campaign\\terrain_heighfield.rs"
			],
			[
				"screen_",
				"warmind\\src\\modes\\screen_saver.rs"
			],
			[
				"modes labro",
				"warmind\\src\\modes\\laboratory.rs"
			],
			[
				"labor",
				"warmind\\src\\gui\\laboratory.rs"
			],
			[
				"spawn",
				"warmind\\src\\humania\\ops\\spawn_player_op.rs"
			],
			[
				"spawn_garr",
				"warmind\\src\\humania\\ops\\spawn_garrison_op.rs"
			],
			[
				"tile_det",
				"warmind\\src\\gui\\tile_details.rs"
			],
			[
				"decals.wg",
				"candy_wgpu_pipelines\\assets\\decals.wgsl"
			],
			[
				"uniform",
				"candy_wgpu_pipelines\\assets\\uniforms.wgsl"
			],
			[
				"starkind.js",
				"warmind\\assets\\sprites\\starkind.json"
			],
			[
				"atlas.",
				"warmind\\assets\\sprites\\atlas.json"
			],
			[
				"gizm",
				"warmind\\src\\modes\\gizmo.rs"
			],
			[
				"sprite_col",
				"pixie2\\src\\sprite_collection.rs"
			],
			[
				"so3",
				"gems\\src\\so3.rs"
			],
			[
				"transform",
				"scene_tree\\src\\transform.rs"
			],
			[
				"candy.rs",
				"warmind\\src\\modes\\candy.rs"
			],
			[
				"mesh",
				"candy_wgpu_pipelines\\src\\default_pipeline\\mesh_resources.rs"
			],
			[
				"onion sou",
				"pixie2\\src\\onion_soup.rs"
			],
			[
				"onion_soup",
				"pixie2\\src\\onion_soup.rs"
			],
			[
				"astar",
				"camino\\src\\astar.rs"
			],
			[
				"astar.",
				"camino\\src\\astar.rs"
			],
			[
				"gaia src op.rs",
				"gaia\\src\\op.rs"
			],
			[
				"atlas",
				"warmind\\assets\\sprites\\atlas.json"
			],
			[
				"biome",
				"gaia\\src\\biome.rs"
			],
			[
				"so2",
				"gems\\src\\so2.rs"
			],
			[
				"bin/",
				"gaia\\src\\bin\\gaia.rs"
			],
			[
				"sprite pip",
				"candy_wgpu_pipelines\\src\\sprite_pipeline.rs"
			],
			[
				"gizmo.",
				"warmind\\src\\modes\\gizmo.rs"
			],
			[
				"camera_mod",
				"warmind\\src\\modes\\camera\\camara_mode.rs"
			],
			[
				"gaia terrain",
				"gaia\\src\\terrain.rs"
			],
			[
				"color",
				"gems\\src\\color.rs"
			],
			[
				"rect",
				"gems\\src\\rect.rs"
			],
			[
				"color.rs",
				"gems\\src\\color.rs"
			],
			[
				"human poll",
				"warmind\\src\\humania\\layers\\pollution.rs"
			],
			[
				"biome.r",
				"gaia\\src\\biome.rs"
			],
			[
				"campaign rend",
				"warmind\\src\\modes\\campaign\\campaign_renderer.rs"
			],
			[
				"grid.",
				"gems\\src\\grid.rs"
			],
			[
				"system",
				"atom\\src\\system.rs"
			],
			[
				"muli",
				"gems\\src\\multi_grid.rs"
			],
			[
				"dog.rs",
				"gems\\src\\dog.rs"
			],
			[
				"atom_mol lib.rs",
				"atom_mol\\src\\lib.rs"
			],
			[
				"scene_tree utils",
				"scene_tree\\src\\utils.rs"
			],
			[
				"fabric",
				"atom\\src\\fabric.rs"
			],
			[
				"deploy squad",
				"warmind\\src\\modes\\battle\\squad_deployment.rs"
			],
			[
				"battle arena.rs",
				"warmind\\src\\modes\\battle\\arena.rs"
			],
			[
				"scene_tree sys",
				"scene_tree\\src\\layers.rs"
			],
			[
				"copendiu",
				"warmind\\src\\codex\\copendium.rs"
			],
			[
				"copend",
				"warmind\\src\\codex\\copendium.rs"
			],
			[
				"scenetree mol.r",
				"scene_tree\\src\\mol.rs"
			],
			[
				"transform_sys",
				"ephr_core\\src\\systems\\transform_system.rs"
			],
			[
				"system.rs",
				"atom\\src\\system.rs"
			],
			[
				"mol ",
				"camino_mol\\src\\mol.rs"
			],
			[
				"cocktail",
				"cocktail\\src\\cocktail.rs"
			],
			[
				"squad del wid",
				"warmind\\src\\gui\\squad_details.rs"
			],
			[
				"copendium",
				"warmind\\src\\codex\\copendium.rs"
			],
			[
				"singl",
				"atom\\src\\singleton.rs"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 323.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 592.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 307.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 1
	}
}
